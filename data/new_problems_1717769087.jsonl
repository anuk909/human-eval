{"task_id": "hard/1", "prompt": "def check_palindrome_permutation(s):\n    \"\"\"\n    Write a function that checks if any permutation of a given string is a palindrome.\n\n    A palindrome is a word or phrase that reads the same forward and backward, ignoring spaces, punctuation, and letter casing.\n\n    For example:\n    - If the input string is 'Tact Coa', after ignoring spaces and changing to lower case, the output should be True, because 'taco cat' is a palindrome permutation of the string.\n    - For the input string 'random', the function should return False.\n\n    Note:\n    - Consider only alphabetical characters and ignore digit and punctuation symbols.\n    - Characters are case-insensitive (consider 'A' and 'a' as the same).\n    - An empty string is considered a palindrome.\n    \"\"\"\n", "canonical_solution": "def check_palindrome_permutation(s):\n    s = ''.join(c.lower() for c in s if c.isalpha())\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    odd_count = sum(1 for count in char_count.values() if count % 2 != 0)\n    return odd_count <= 1", "test": "def check(candidate):\n    assert candidate('Tact Coa') == True\n    assert candidate('') == True\n    assert candidate('random') == False\n    assert candidate('A Santa Lived As a Devil At NASA') == True\n    assert candidate('No, Lemon No Melon') == True\n    assert candidate('Never Odd or Even') == True\n    assert candidate('Was it a car or a cat I saw?') == True\n    assert candidate('1234321') == True\n    assert candidate('not a Palindrome') == False", "entry_point": "check_palindrome_permutation"}
