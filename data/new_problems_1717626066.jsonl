{"task_id": "test/1", "prompt": "def return_max(a, b):\n", "canonical_solution": "    return max(a, b)", "test": "def check(candidate):\n    assert candidate(3, 8) == 8\n    assert candidate(-5, 3) == 3\n    assert candidate(0, 0) == 0\n    assert candidate(10, 10) == 10\n    assert candidate(-6, -3) == -3", "entry_point": "return_max"}
{"task_id": "test/2", "prompt": "def is_palindrome(s):\n", "canonical_solution": "    return s == s[::-1]", "test": "def check(candidate):\n    assert candidate('racecar') == True\n    assert candidate('hello') == False\n    assert candidate('madam') == True\n    assert candidate('12321') == True\n    assert candidate('apple') == False", "entry_point": "is_palindrome"}
{"task_id": "test/3", "prompt": "def sum_digits(n):\n    \"\"\"Return the sum of the digits of the given number n\"\"\"\n", "canonical_solution": "    return sum(int(digit) for digit in str(n))", "test": "def check(candidate):\n    assert candidate(123) == 6\n    assert candidate(456789) == 39\n    assert candidate(0) == 0\n    assert candidate(111) == 3\n    assert candidate(987654321) == 45", "entry_point": "sum_digits"}
{"task_id": "test/4", "prompt": "def multiply_elements(arr1, arr2):\n    \"\"\"Return a new list containing the element-wise multiplication of the input lists arr1 and arr2\"\"\"\n", "canonical_solution": "    return [x * y for x, y in zip(arr1, arr2)]", "test": "def check(candidate):\n    assert candidate([1, 2, 3], [4, 5, 6]) == [4, 10, 18]\n    assert candidate([-1, -2, -3], [1, 2, 3]) == [-1, -4, -9]\n    assert candidate([0, 0, 0], [1, 2, 3]) == [0, 0, 0]\n    assert candidate([5, 5, 5], [1, 1, 1]) == [5, 5, 5]\n    assert candidate([2, 3, 4], [1, 1, 1]) == [2, 3, 4]", "entry_point": "multiply_elements"}
{"task_id": "test/5", "prompt": "def average(nums):\n    \"\"\"Return the average of the numbers in the given list nums\"\"\"\n", "canonical_solution": "    return sum(nums) / len(nums)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 3.0\n    assert candidate([10, 20, 30, 40, 50]) == 30.0\n    assert candidate([100, 200, 300]) == 200.0\n    assert candidate([0, 0, 0, 0, 0]) == 0.0\n    assert candidate([-5, 5, -5, 5, -5]) == -1.0", "entry_point": "average"}
{"task_id": "test/6", "prompt": "def is_prime(n):\n    \"\"\"Return True if the given number n is prime, else return False\"\"\"\n", "canonical_solution": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "test": "def check(candidate):\n    assert candidate(2) == True\n    assert candidate(3) == True\n    assert candidate(5) == True\n    assert candidate(4) == False\n    assert candidate(9) == False", "entry_point": "is_prime"}
{"task_id": "test/7", "prompt": "def power_of_two(n):\n    \"\"\"Return true if the given number n is a power of two, else return False\"\"\"\n", "canonical_solution": "    return n > 0 and (n & (n - 1)) == 0", "test": "def check(candidate):\n    assert candidate(1) == True\n    assert candidate(2) == True\n    assert candidate(4) == True\n    assert candidate(8) == True\n    assert candidate(6) == False", "entry_point": "power_of_two"}
{"task_id": "test/8", "prompt": "def find_maximum(nums):\n    \"\"\"Return the maximum number in the given list nums\"\"\"\n", "canonical_solution": "    return max(nums)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 5\n    assert candidate([10, 20, 30, 40, 50]) == 50\n    assert candidate([100, 200, 300]) == 300\n    assert candidate([0, 0, 0, 0, 0]) == 0\n    assert candidate([-5, 5, -5, 5, -5]) == 5", "entry_point": "find_maximum"}
