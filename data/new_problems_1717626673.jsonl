{"task_id": "test/1", "prompt": "def return_double(num):\n", "canonical_solution": "    return num * 2", "test": "def check(candidate):\n    assert candidate(3) == 6\n    assert candidate(-5) == -10\n    assert candidate(0) == 0\n    assert candidate(10) == 20\n    assert candidate(7) == 14", "entry_point": "return_double"}
{"task_id": "test/2", "prompt": "def is_prime(num):\n    '''Return True if the given number is prime, else False'''\n", "canonical_solution": "    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "test": "def check(candidate):\n    assert candidate(5) == True\n    assert candidate(7) == True\n    assert candidate(10) == False\n    assert candidate(13) == True\n    assert candidate(15) == False", "entry_point": "is_prime"}
{"task_id": "test/3", "prompt": "def sum_of_squares(n):\n    '''Return the sum of squares of first n natural numbers'''\n", "canonical_solution": "    return n * (n + 1) * (2 * n + 1) // 6", "test": "def check(candidate):\n    assert candidate(3) == 14\n    assert candidate(4) == 30\n    assert candidate(5) == 55\n    assert candidate(6) == 91\n    assert candidate(7) == 140", "entry_point": "sum_of_squares"}
{"task_id": "test/4", "prompt": "def is_even(num):\n    '''Return True if the given number is even, else False'''\n", "canonical_solution": "    return num % 2 == 0", "test": "def check(candidate):\n    assert candidate(4) == True\n    assert candidate(7) == False\n    assert candidate(-10) == True\n    assert candidate(0) == True\n    assert candidate(101) == False", "entry_point": "is_even"}
{"task_id": "test/5", "prompt": "def power_of(num, exp):\n    '''Return the result of raising num to the power of exp'''\n", "canonical_solution": "    return num ** exp", "test": "def check(candidate):\n    assert candidate(2, 3) == 8\n    assert candidate(5, 0) == 1\n    assert candidate(3, 4) == 81\n    assert candidate(10, 2) == 100\n    assert candidate(7, 3) == 343", "entry_point": "power_of"}
{"task_id": "test/6", "prompt": "def is_palindrome(word):\n    '''Return True if the given word is a palindrome, else False'''\n", "canonical_solution": "    return word == word[::-1]", "test": "def check(candidate):\n    assert candidate('racecar') == True\n    assert candidate('hello') == False\n    assert candidate('radar') == True\n    assert candidate('level') == True\n    assert candidate('python') == False", "entry_point": "is_palindrome"}
{"task_id": "test/7", "prompt": "def average_of_list(lst):\n    '''Return the average of the numbers in the given list'''\n", "canonical_solution": "    return sum(lst) / len(lst)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 3.0\n    assert candidate([10, 20, 30, 40, 50]) == 30.0\n    assert candidate([7, 8, 9, 10]) == 8.5\n    assert candidate([100, 200, 300, 400]) == 250.0\n    assert candidate([2, 4, 6, 8, 10]) == 6.0", "entry_point": "average_of_list"}
{"task_id": "test/8", "prompt": "def absolute_difference(num1, num2):\n    '''Return the absolute difference between two numbers'''\n", "canonical_solution": "    return abs(num1 - num2)", "test": "def check(candidate):\n    assert candidate(5, 3) == 2\n    assert candidate(-5, -3) == 2\n    assert candidate(10, 3) == 7\n    assert candidate(7, 7) == 0\n    assert candidate(16, 20) == 4", "entry_point": "absolute_difference"}
{"task_id": "test/9", "prompt": "def reverse_string(s):\n    '''Return the reverse of the given string'''\n", "canonical_solution": "    return s[::-1]", "test": "def check(candidate):\n    assert candidate('hello') == 'olleh'\n    assert candidate('python') == 'nohtyp'\n    assert candidate('racecar') == 'racecar'\n    assert candidate('madam') == 'madam'\n    assert candidate('12345') == '54321'", "entry_point": "reverse_string"}
{"task_id": "test/10", "prompt": "def quadratic_formula(a, b, c):\n    '''Return the roots of the quadratic equation: ax^2 + bx + c = 0'''\n", "canonical_solution": "    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        return (root1, root2)\n    elif discriminant == 0:\n        root1 = root2 = -b / (2*a)\n        return (root1, root2)\n    else:\n        return 'No real roots'", "test": "def check(candidate):\n    assert candidate(1, -3, 2) == (2.0, 1.0)\n    assert candidate(1, 4, 4) == (-2.0, -2.0)\n    assert candidate(1, -5, 6) == (3.0, 2.0)\n    assert candidate(2, -7, 3) == (3.0, 0.5)\n    assert candidate(1, 1, 1) == 'No real roots'", "entry_point": "quadratic_formula"}
{"task_id": "test/11", "prompt": "def is_anagram(word1, word2):\n    '''Return True if the given words are anagrams, else False'''\n", "canonical_solution": "    return sorted(word1) == sorted(word2)", "test": "def check(candidate):\n    assert candidate('listen', 'silent') == True\n    assert candidate('triangle', 'integral') == True\n    assert candidate('hello', 'world') == False\n    assert candidate('test', 'sett') == True\n    assert candidate('python', 'java') == False", "entry_point": "is_anagram"}
{"task_id": "test/12", "prompt": "def max_of_three(num1, num2, num3):\n    '''Return the maximum of three numbers'''\n", "canonical_solution": "    return max(num1, num2, num3)", "test": "def check(candidate):\n    assert candidate(5, 3, 7) == 7\n    assert candidate(-5, -3, -10) == -3\n    assert candidate(10, 3, 7) == 10\n    assert candidate(7, 7, 7) == 7\n    assert candidate(16, 20, 15) == 20", "entry_point": "max_of_three"}
{"task_id": "test/13", "prompt": "def factorial(n):\n    '''Return the factorial of a given number n'''\n", "canonical_solution": "    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "test": "def check(candidate):\n    assert candidate(3) == 6\n    assert candidate(5) == 120\n    assert candidate(6) == 720\n    assert candidate(0) == 1\n    assert candidate(10) == 3628800", "entry_point": "factorial"}
{"task_id": "test/14", "prompt": "def reverse_string(s):\n    '''Return the reverse of the given string s'''\n", "canonical_solution": "    return s[::-1]", "test": "def check(candidate):\n    assert candidate('hello') == 'olleh'\n    assert candidate('world') == 'dlrow'\n    assert candidate('python') == 'nohtyp'\n    assert candidate('racecar') == 'racecar'\n    assert candidate('goodbye') == 'eybdoog'", "entry_point": "reverse_string"}
{"task_id": "test/15", "prompt": "def calculate_factorial(n):\n    '''Return the factorial of a given number n'''\n", "canonical_solution": "    if n == 0:\n        return 1\n    else:\n        return n * calculate_factorial(n-1)", "test": "def check(candidate):\n    assert candidate(5) == 120\n    assert candidate(4) == 24\n    assert candidate(6) == 720\n    assert candidate(3) == 6\n    assert candidate(8) == 40320", "entry_point": "calculate_factorial"}
{"task_id": "test/16", "prompt": "def list_intersection(list1, list2):\n    '''Return the intersection of two lists list1 and list2'''\n", "canonical_solution": "    return list(set(list1) & set(list2))", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [3, 4, 5]\n    assert candidate([7, 8, 9], [4, 5, 6]) == []\n    assert candidate(['apple', 'banana', 'orange', 'grape'], ['banana', 'orange', 'kiwi']) == ['banana', 'orange']\n    assert candidate([1, 2, 3], [3, 4, 5]) == [3]\n    assert candidate([1, 2, 3, 4], [5, 6, 7, 8]) == []", "entry_point": "list_intersection"}
{"task_id": "test/17", "prompt": "def count_characters(s):\n    '''Return a dictionary with the count of each character in the given string s'''\n", "canonical_solution": "    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count", "test": "def check(candidate):\n    assert candidate('hello') == {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n    assert candidate('python') == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert candidate('racecar') == {'r': 2, 'a': 2, 'c': 2, 'e': 1}\n    assert candidate('madam') == {'m': 2, 'a': 2, 'd': 1}\n    assert candidate('12345') == {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1}", "entry_point": "count_characters"}
{"task_id": "test/18", "prompt": "def is_anagram(str1, str2):\n    '''Return True if the given strings str1 and str2 are anagrams, else False'''\n", "canonical_solution": "    return sorted(str1) == sorted(str2)", "test": "def check(candidate):\n    assert candidate('listen', 'silent') == True\n    assert candidate('triangle', 'integral') == True\n    assert candidate('hello', 'world') == False\n    assert candidate('iceman', 'cinema') == True\n    assert candidate('python', 'java') == False", "entry_point": "is_anagram"}
{"task_id": "test/19", "prompt": "def is_palindrome(s):\n    '''Return True if the given string s is a palindrome, else False'''\n", "canonical_solution": "    return s == s[::-1]", "test": "def check(candidate):\n    assert candidate('radar') == True\n    assert candidate('level') == True\n    assert candidate('hello') == False\n    assert candidate('racecar') == True\n    assert candidate('python') == False", "entry_point": "is_palindrome"}
{"task_id": "test/20", "prompt": "def calculate_triangle_area(base, height):\n    '''Return the area of a triangle given its base and height'''\n", "canonical_solution": "    return 0.5 * base * height", "test": "def check(candidate):\n    assert candidate(3, 4) == 6.0\n    assert candidate(5, 12) == 30\n    assert candidate(8, 15) == 60.0\n    assert candidate(10, 24) == 120.0\n    assert candidate(7, 24) == 84.0", "entry_point": "calculate_triangle_area"}
{"task_id": "test/21", "prompt": "def reverse_words_in_sentence(sentence):\n    '''Return the sentence with words reversed'''\n", "canonical_solution": "    return ' '.join(word[::-1] for word in sentence.split())", "test": "def check(candidate):\n    assert candidate('hello world') == 'olleh dlrow'\n    assert candidate('python is fun') == 'nohtyp si nuf'\n    assert candidate('racecar radar level') == 'racecar radar level'\n    assert candidate('apple banana cherry') == 'elppa ananab yrrehc'\n    assert candidate('123 456 789') == '321 654 987'", "entry_point": "reverse_words_in_sentence"}
{"task_id": "test/22", "prompt": "def find_maximum_number(arr):\n    '''Return the maximum number from the given array arr'''\n", "canonical_solution": "    return max(arr)", "test": "def check(candidate):\n    assert candidate([3, 5, 2, 8, 1]) == 8\n    assert candidate([10, 29, 14, 33, 20]) == 33\n    assert candidate([-1, -5, -2, -8, -3]) == -1\n    assert candidate([0, 0, 0, 0, 0]) == 0\n    assert candidate([-10, -20, -5, -3, -7]) == -3", "entry_point": "find_maximum_number"}
{"task_id": "test/23", "prompt": "def find_second_largest(arr):\n    '''Return the second largest number from the given array arr'''\n", "canonical_solution": "    arr.sort()\n    return arr[-2]", "test": "def check(candidate):\n    assert candidate([3, 5, 2, 8, 1]) == 5\n    assert candidate([10, 29, 14, 33, 20]) == 29\n    assert candidate([-1, -5, -2, -8, -3]) == -2\n    assert candidate([0, 0, 0, 0, 0]) == 0\n    assert candidate([-10, -20, -5, -3, -7]) == -5", "entry_point": "find_second_largest"}
{"task_id": "test/24", "prompt": "def find_max_three_numbers(arr):\n    '''Return the three largest numbers from the given array arr'''\n", "canonical_solution": "    arr.sort()\n    return arr[-3:][::-1]", "test": "def check(candidate):\n    assert candidate([3, 4, 2, 8, 1]) == [8, 4, 3]\n    assert candidate([10, 29, 14, 33, 20]) == [33, 29, 20]\n    assert candidate([-1, -5, -2, -8, -3]) == [-1, -2, -3]\n    assert candidate([0, 0, 0, 0, 0]) == [0, 0, 0]\n    assert candidate([-10, -20, -5, -3, -7]) == [-3, -5, -7]", "entry_point": "find_max_three_numbers"}
{"task_id": "test/25", "prompt": "def find_common_elements(lst1, lst2):\n    '''Return a list of common elements between lst1 and lst2'''\n", "canonical_solution": "    return list(set(lst1) & set(lst2))", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]\n    assert candidate([10, 20, 30], [30, 40, 50]) == [30]\n    assert candidate([7, 8, 9], [10]) == []\n    assert candidate([100, 200, 300], [400, 500, 600]) == []\n    assert candidate([2, 4, 6, 8], [3, 5, 7, 9]) == []", "entry_point": "find_common_elements"}
{"task_id": "test/26", "prompt": "def is_palindrome(s):\n    '''Return True if the given string is a palindrome, else False'''\n", "canonical_solution": "    return s == s[::-1]", "test": "def check(candidate):\n    assert candidate('radar') == True\n    assert candidate('level') == True\n    assert candidate('python') == False\n    assert candidate('racecar') == True\n    assert candidate('madam') == True", "entry_point": "is_palindrome"}
{"task_id": "test/27", "prompt": "def count_vowels(s):\n    '''Return the number of vowels in the given string s'''\n", "canonical_solution": "    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count", "test": "def check(candidate):\n    assert candidate('hello') == 2\n    assert candidate('world') == 1\n    assert candidate('python') == 1\n    assert candidate('racecar') == 3\n    assert candidate('goodbye') == 3", "entry_point": "count_vowels"}
{"task_id": "test/28", "prompt": "def max_consecutive_sum(arr, k):\n    '''Return the maximum sum of k consecutive elements in the given array arr'''\n", "canonical_solution": "    max_sum = sum(arr[:k])\n    current_sum = max_sum\n    for i in range(k, len(arr)):\n        current_sum = current_sum - arr[i - k] + arr[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 2) == 9\n    assert candidate([1, 2, 3, 4, 5], 3) == 12\n    assert candidate([1, 2, 3, 4, 5], 4) == 14\n    assert candidate([2, 3, 4, 5, 6, 7], 3) == 18\n    assert candidate([-2, 1, -3, 4, -1, 2, 1, -5, 4], 4) == 6", "entry_point": "max_consecutive_sum"}
{"task_id": "test/29", "prompt": "def count_vowels(s):\n    '''Return the count of vowels in the given string s'''\n", "canonical_solution": "    return sum(1 for char in s if char in 'aeiouAEIOU')", "test": "def check(candidate):\n    assert candidate('hello') == 2\n    assert candidate('world') == 1\n    assert candidate('python') == 1\n    assert candidate('racecar') == 3\n    assert candidate('goodbye') == 3", "entry_point": "count_vowels"}
{"task_id": "test/30", "prompt": "def is_palindrome(s):\n    '''Return True if the given string s is a palindrome, else False'''\n", "canonical_solution": "    return s == s[::-1]", "test": "def check(candidate):\n    assert candidate('radar') == True\n    assert candidate('level') == True\n    assert candidate('hello') == False\n    assert candidate('python') == False\n    assert candidate('racecar') == True", "entry_point": "is_palindrome"}
{"task_id": "test/31", "prompt": "def count_vowels(s):\n    '''Return the number of vowels in the given string s'''\n", "canonical_solution": "    count = 0\n    vowels = \"aeiouAEIOU\"\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count", "test": "def check(candidate):\n    assert candidate('hello') == 2\n    assert candidate('python') == 1\n    assert candidate('racecar') == 3\n    assert candidate('madam') == 2\n    assert candidate('coding') == 2", "entry_point": "count_vowels"}
{"task_id": "test/32", "prompt": "def is_prime(n):\n    '''Return True if the given number n is a prime number, else False'''\n", "canonical_solution": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "test": "def check(candidate):\n    assert candidate(2) == True\n    assert candidate(3) == True\n    assert candidate(5) == True\n    assert candidate(6) == False\n    assert candidate(11) == True", "entry_point": "is_prime"}
{"task_id": "test/33", "prompt": "def sum_even_numbers(arr):\n    '''Return the sum of all the even numbers in the given array arr'''\n", "canonical_solution": "    return sum(num for num in arr if num % 2 == 0)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6]) == 12\n    assert candidate([2, 4, 6, 8, 10]) == 30\n    assert candidate([3, 5, 7, 9, 11]) == 0\n    assert candidate([0, 1, 2, 3, 4, 5]) == 6\n    assert candidate([10, 20, 30, 40, 50]) == 150", "entry_point": "sum_even_numbers"}
{"task_id": "test/34", "prompt": "def find_largest_divisible(arr, num):\n    '''Return the largest number in arr divisible by num'''\n", "canonical_solution": "    max_divisible = 0\n    for a in arr:\n        if a % num == 0 and a > max_divisible:\n            max_divisible = a\n    return max_divisible", "test": "def check(candidate):\n    assert candidate([15, 20, 5, 30, 25], 5) == 30\n    assert candidate([10, 23, 17, 12, 29], 10) == 10\n    assert candidate([40, 60, 35, 45, 55], 20) == 60\n    assert candidate([7, 14, 21, 28, 35], 7) == 35\n    assert candidate([25, 50, 75, 100], 3) == 75", "entry_point": "find_largest_divisible"}
{"task_id": "test/35", "prompt": "def list_sum(lst):\n    '''Return the sum of all the numbers in the given list '''\n", "canonical_solution": "    return sum(lst)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 15\n    assert candidate([10, 20, 30, 40, 50]) == 150\n    assert candidate([7, 8, 9, 10]) == 34\n    assert candidate([100, 200, 300, 400]) == 1000\n    assert candidate([2, 4, 6, 8, 10]) == 30", "entry_point": "list_sum"}
{"task_id": "test/36", "prompt": "def is_prime(n):\n    '''Return True if the given number n is prime, else False'''\n", "canonical_solution": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "test": "def check(candidate):\n    assert candidate(7) == True\n    assert candidate(13) == True\n    assert candidate(20) == False\n    assert candidate(29) == True\n    assert candidate(1) == False", "entry_point": "is_prime"}
{"task_id": "test/37", "prompt": "def count_vowels(s):\n    '''Return the count of vowels in the given string s'''\n", "canonical_solution": "    return sum(1 for char in s if char in 'aeiouAEIOU')", "test": "def check(candidate):\n    assert candidate('hello') == 2\n    assert candidate('python') == 1\n    assert candidate('algorithm') == 3\n    assert candidate('ai') == 2\n    assert candidate('beautiful') == 5", "entry_point": "count_vowels"}
{"task_id": "test/38", "prompt": "def average_of_list(arr):\n    '''Return the average of all the numbers in the given list arr'''\n", "canonical_solution": "    return sum(arr) / len(arr)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 3\n    assert candidate([10, 20, 30, 40, 50]) == 30\n    assert candidate([-1, -2, -3, -4, -5]) == -3\n    assert candidate([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6\n    assert candidate([103, 456, 22, 765, 90]) == 287.2", "entry_point": "average_of_list"}
{"task_id": "test/39", "prompt": "def reverse_string(s):\n    '''Return the given string s reversed'''\n", "canonical_solution": "    return s[::-1]", "test": "def check(candidate):\n    assert candidate('hello') == 'olleh'\n    assert candidate('world') == 'dlrow'\n    assert candidate('python') == 'nohtyp'\n    assert candidate('racecar') == 'racecar'\n    assert candidate('goodbye') == 'eybdoog'", "entry_point": "reverse_string"}
{"task_id": "test/40", "prompt": "def array_diff(arr1, arr2):\n    '''Return the difference between the two arrays arr1 and arr2'''\n", "canonical_solution": "    return [x for x in arr1 if x not in arr2]", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [3, 4]) == [1, 2, 5]\n    assert candidate([5, 6, 7, 8, 9], [8, 9]) == [5, 6, 7]\n    assert candidate([10, 20, 30, 40, 50], [60, 70, 80]) == [10, 20, 30, 40, 50]\n    assert candidate(['apple', 'banana', 'cherry'], ['cherry', 'banana']) == ['apple']\n    assert candidate([1, 2, 3, 4, 5], []) == [1, 2, 3, 4, 5]", "entry_point": "array_diff"}
{"task_id": "test/41", "prompt": "def average_of_array(arr):\n    '''Return the average of the numbers in the given array arr'''\n", "canonical_solution": "    return sum(arr) / len(arr)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 3.0\n    assert candidate([10, 20, 30, 40, 50]) == 30.0\n    assert candidate([0, 0, 0, 0, 0]) == 0.0\n    assert candidate([-10, -20, -30, -40, -50]) == -30.0\n    assert candidate([5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == 27.5", "entry_point": "average_of_array"}
{"task_id": "test/42", "prompt": "def factorial(n):\n    '''Return the factorial of the given number n'''\n", "canonical_solution": "    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "test": "def check(candidate):\n    assert candidate(5) == 120\n    assert candidate(4) == 24\n    assert candidate(0) == 1\n    assert candidate(1) == 1\n    assert candidate(10) == 3628800", "entry_point": "factorial"}
{"task_id": "test/43", "prompt": "def find_max_element(lst):\n    '''Return the maximum element from the given list lst'''\n", "canonical_solution": "    return max(lst)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 5\n    assert candidate([10, 20, 30, 40, 50]) == 50\n    assert candidate([7, 8, 9, 10]) == 10\n    assert candidate([100, 200, 300, 400]) == 400\n    assert candidate([2, 4, 6, 8, 10]) == 10", "entry_point": "find_max_element"}
{"task_id": "test/44", "prompt": "def reverse_string(s):\n    '''Return the reverse of the given string s'''\n", "canonical_solution": "    return s[::-1]", "test": "def check(candidate):\n    assert candidate('hello') == 'olleh'\n    assert candidate('world') == 'dlrow'\n    assert candidate('python') == 'nohtyp'\n    assert candidate('racecar') == 'racecar'\n    assert candidate('goodbye') == 'eybdoog'", "entry_point": "reverse_string"}
{"task_id": "test/45", "prompt": "def calculate_power(base, exponent):\n    '''Return base to the power of exponent'''\n", "canonical_solution": "    return base ** exponent", "test": "def check(candidate):\n    assert candidate(2, 3) == 8\n    assert candidate(5, 2) == 25\n    assert candidate(7, 3) == 343\n    assert candidate(10, 0) == 1\n    assert candidate(3, 4) == 81", "entry_point": "calculate_power"}
{"task_id": "test/46", "prompt": "def calculate_power(base, exponent):\n    '''Return the result of raising the base to the power of exponent'''\n", "canonical_solution": "    return base ** exponent", "test": "def check(candidate):\n    assert candidate(2, 3) == 8\n    assert candidate(5, 2) == 25\n    assert candidate(3, 4) == 81\n    assert candidate(10, 0) == 1\n    assert candidate(7, 1) == 7", "entry_point": "calculate_power"}
{"task_id": "test/47", "prompt": "def count_vowels(s):\n    '''Return the count of vowels in the given string s'''\n", "canonical_solution": "    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count", "test": "def check(candidate):\n    assert candidate('hello') == 2\n    assert candidate('world') == 1\n    assert candidate('python') == 1\n    assert candidate('racecar') == 3\n    assert candidate('goodbye') == 3", "entry_point": "count_vowels"}
{"task_id": "test/48", "prompt": "def is_prime(n):\n    '''Return True if the given number n is prime, else False'''\n", "canonical_solution": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "test": "def check(candidate):\n    assert candidate(2) == True\n    assert candidate(3) == True\n    assert candidate(5) == True\n    assert candidate(9) == False\n    assert candidate(11) == True", "entry_point": "is_prime"}
{"task_id": "test/49", "prompt": "def merge_lists(list1, list2):\n    '''Return a new list by merging the elements alternatively from list1 and list2'''\n", "canonical_solution": "    merged_list = []\n    for i in range(max(len(list1), len(list2))):\n        if i < len(list1):\n            merged_list.append(list1[i])\n        if i < len(list2):\n            merged_list.append(list2[i])\n    return merged_list", "test": "def check(candidate):\n    assert candidate([1, 2, 3], ['a', 'b', 'c']) == [1, 'a', 2, 'b', 3, 'c']\n    assert candidate(['x', 'y'], [4, 5, 6]) == ['x', 4, 'y', 5, 6]\n    assert candidate([10, 20, 30], []) == [10, 20, 30]\n    assert candidate([], [7, 8, 9]) == [7, 8, 9]\n    assert candidate([], []) == []", "entry_point": "merge_lists"}
{"task_id": "test/50", "prompt": "def count_factors(n):\n    '''Return the number of factors of the given number n'''\n", "canonical_solution": "    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count", "test": "def check(candidate):\n    assert candidate(10) == 4\n    assert candidate(15) == 4\n    assert candidate(16) == 5\n    assert candidate(20) == 6\n    assert candidate(25) == 3", "entry_point": "count_factors"}
{"task_id": "test/51", "prompt": "def find_largest_element(arr):\n    '''Return the largest element in the given array arr'''\n", "canonical_solution": "    return max(arr)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 5\n    assert candidate([10, 20, 30, 40, 50]) == 50\n    assert candidate([5, 8, 2, 11, 33, 6]) == 33\n    assert candidate([17, 9, 25, 4, 13]) == 25\n    assert candidate([100, 200, 300, 400, 500]) == 500", "entry_point": "find_largest_element"}
{"task_id": "test/52", "prompt": "def is_palindrome(s):\n    '''Return True if the given string s is a palindrome, else False'''\n", "canonical_solution": "    return s == s[::-1]", "test": "def check(candidate):\n    assert candidate('radar') == True\n    assert candidate('level') == True\n    assert candidate('python') == False\n    assert candidate('madam') == True\n    assert candidate('racecar') == True", "entry_point": "is_palindrome"}
{"task_id": "test/53", "prompt": "def is_prime(num):\n    '''Return True if the given number num is a prime number, else False'''\n", "canonical_solution": "    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True", "test": "def check(candidate):\n    assert candidate(2) == True\n    assert candidate(3) == True\n    assert candidate(4) == False\n    assert candidate(5) == True\n    assert candidate(6) == False", "entry_point": "is_prime"}
{"task_id": "test/54", "prompt": "def merge_lists(list1, list2):\n    '''Return a merged list containing the elements from both list1 and list2'''\n", "canonical_solution": "    return list1 + list2", "test": "def check(candidate):\n    assert candidate([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert candidate([7, 8, 9], [4, 5, 6]) == [7, 8, 9, 4, 5, 6]\n    assert candidate(['apple', 'banana'], ['orange', 'grape']) == ['apple', 'banana', 'orange', 'grape']\n    assert candidate([1, 2], [3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert candidate([6, 7, 8], [9, 10]) == [6, 7, 8, 9, 10]", "entry_point": "merge_lists"}
{"task_id": "test/55", "prompt": "def factorial(n):\n    '''Return the factorial of the given number n'''\n", "canonical_solution": "    if n == 0:\n        return 1\n    return n * factorial(n-1)", "test": "def check(candidate):\n    assert candidate(0) == 1\n    assert candidate(1) == 1\n    assert candidate(5) == 120\n    assert candidate(7) == 5040\n    assert candidate(10) == 3628800", "entry_point": "factorial"}
{"task_id": "test/56", "prompt": "def find_smallest_missing_positive(arr):\n    '''Return the smallest missing positive number in the given array arr'''\n", "canonical_solution": "    n = len(arr)\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i]-1] != arr[i]:\n            arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1", "test": "def check(candidate):\n    assert candidate([1, 2, 0]) == 3\n    assert candidate([3, 4, -1, 1]) == 2\n    assert candidate([7, 8, 9, 11, 12]) == 1\n    assert candidate([0, -10, 1, 3, 2]) == 4\n    assert candidate([1, 2, 3, 4, 5, 6]) == 7", "entry_point": "find_smallest_missing_positive"}
{"task_id": "test/57", "prompt": "def gcd(a, b):\n    '''Return the greatest common divisor of the two given numbers a and b'''\n", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a", "test": "def check(candidate):\n    assert candidate(4, 6) == 2\n    assert candidate(12, 15) == 3\n    assert candidate(50, 75) == 25\n    assert candidate(7, 9) == 1\n    assert candidate(100, 125) == 25", "entry_point": "gcd"}
{"task_id": "test/58", "prompt": "def count_vowels(word):\n    '''Return the count of vowels in the given word'''\n", "canonical_solution": "    vowels = 'aeiou'\n    word = word.lower()\n    count = 0\n    for char in word:\n        if char in vowels:\n            count += 1\n    return count", "test": "def check(candidate):\n    assert candidate('hello') == 2\n    assert candidate('world') == 1\n    assert candidate('apple') == 2\n    assert candidate('banana') == 3\n    assert candidate('watermelon') == 4", "entry_point": "count_vowels"}
{"task_id": "test/59", "prompt": "def is_prime(n):\n    '''Return True if the given number n is a prime number, else False'''\n", "canonical_solution": "    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "test": "def check(candidate):\n    assert candidate(2) == True\n    assert candidate(3) == True\n    assert candidate(4) == False\n    assert candidate(5) == True\n    assert candidate(7) == True", "entry_point": "is_prime"}
{"task_id": "test/60", "prompt": "def reverse_string(s):\n    '''Return the given string s in reverse order'''\n", "canonical_solution": "    return s[::-1]", "test": "def check(candidate):\n    assert candidate('hello') == 'olleh'\n    assert candidate('world') == 'dlrow'\n    assert candidate('python') == 'nohtyp'\n    assert candidate('racecar') == 'racecar'\n    assert candidate('goodbye') == 'eybdoog'", "entry_point": "reverse_string"}
{"task_id": "test/61", "prompt": "def calculate_mean(lst):\n    '''Return the mean of the numbers in the given list lst'''\n", "canonical_solution": "    total = sum(lst)\n    mean = total / len(lst)\n    return mean", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 3\n    assert candidate([10, 20, 30, 40, 50]) == 30\n    assert candidate([7, 8, 9, 10]) == 8.5\n    assert candidate([100, 200, 300, 400]) == 250\n    assert candidate([2, 4, 6, 8, 10]) == 6", "entry_point": "calculate_mean"}
{"task_id": "test/62", "prompt": "def calculate_mean(lst):\n    '''Return the mean (average) of the given list of numbers lst'''\n", "canonical_solution": "    return sum(lst) / len(lst)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 3.0\n    assert candidate([10, 20, 30, 40, 50]) == 30.0\n    assert candidate([7, 8, 9, 10]) == 8.5\n    assert candidate([100, 200, 300, 400]) == 250.0\n    assert candidate([2, 4, 6, 8, 10]) == 6.0", "entry_point": "calculate_mean"}
{"task_id": "test/63", "prompt": "def is_anagram(s1, s2):\n    '''Return True if the given strings s1 and s2 are anagrams, else False'''\n", "canonical_solution": "    return sorted(s1) == sorted(s2)", "test": "def check(candidate):\n    assert candidate('listen', 'silent') == True\n    assert candidate('triangle', 'integral') == True\n    assert candidate('hello', 'world') == False\n    assert candidate('debit card', 'bad credit') == True\n    assert candidate('python', 'java') == False", "entry_point": "is_anagram"}
{"task_id": "test/64", "prompt": "def remove_duplicates(lst):\n    '''Return a list with duplicates removed from the given list lst'''\n", "canonical_solution": "    return list(set(lst))", "test": "def check(candidate):\n    assert candidate([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\n    assert candidate([7, 8, 9, 7, 7, 8]) == [8, 9, 7]\n    assert candidate(['apple', 'banana', 'apple', 'banana']) == ['banana', 'apple']\n    assert candidate([1, 2, 3, 2, 4, 5]) == [1, 2, 3, 4, 5]\n    assert candidate([6, 7, 8, 6, 6, 7]) == [8, 6, 7]", "entry_point": "remove_duplicates"}
{"task_id": "test/65", "prompt": "def binary_search(arr, x):\n    '''Return the index of the element x in the given sorted array arr, or -1 if it is not present'''\n", "canonical_solution": "    start = 0\n    end = len(arr)-1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] < x:\n            start = mid + 1\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            return mid\n    return -1", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 4\n    assert candidate([10, 20, 30, 40, 50, 60, 70, 80, 90], 35) == -1\n    assert candidate([0, 5, 10, 15, 20, 25, 30, 35], 0) == 0\n    assert candidate([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 17) == -1\n    assert candidate([3, 6, 9, 12, 15, 18, 21, 24, 27, 30], 27) == 8", "entry_point": "binary_search"}
{"task_id": "test/66", "prompt": "def is_prime(n):\n    '''Return True if the given number n is prime, otherwise False'''\n", "canonical_solution": "    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "test": "def check(candidate):\n    assert candidate(7) == True\n    assert candidate(11) == True\n    assert candidate(15) == False\n    assert candidate(23) == True\n    assert candidate(10) == False", "entry_point": "is_prime"}
{"task_id": "test/67", "prompt": "def is_perfect_square(n):\n    '''Return True if the given number n is a perfect square, else False'''\n", "canonical_solution": "    return n >= 0 and (n**0.5).is_integer()", "test": "def check(candidate):\n    assert candidate(4) == True\n    assert candidate(9) == True\n    assert candidate(16) == True\n    assert candidate(25) == True\n    assert candidate(30) == False", "entry_point": "is_perfect_square"}
{"task_id": "test/68", "prompt": "def reverse_string(s):\n    '''Return the reversed form of the given string s'''\n", "canonical_solution": "    return s[::-1]", "test": "def check(candidate):\n    assert candidate('hello') == 'olleh'\n    assert candidate('python') == 'nohtyp'\n    assert candidate('racecar') == 'racecar'\n    assert candidate('12345') == '54321'\n    assert candidate('') == ''", "entry_point": "reverse_string"}
