{"task_id": "test/1", "prompt": "def count_users(lst):\n", "canonical_solution": "    return len(lst)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 'user', 'user']) == 5\n    assert candidate(['user', 'user']) == 2\n    assert candidate([]) == 0\n    assert candidate(['user', 'user', 'user', 'user']) == 4\n    assert candidate([1, 'user', 'user', 3, 4, 'user', 6, 'user']) == 8", "entry_point": "count_users"}
{"task_id": "test/2", "prompt": "def find_smallest_integer(lst):\n    '''Return the smallest integer from the given list'''\n", "canonical_solution": "    return min([x for x in lst if isinstance(x, int)])", "test": "def check(candidate):\n    assert candidate([3, 5, 1, 8, 2]) == 1\n    assert candidate([10, 20, 30, 40]) == 10\n    assert candidate([100, 200, 0, 50, -10]) == -10\n    assert candidate([-5, -8, -3, -1, -4]) == -8\n    assert candidate([1, 'integer', 3, 4, 'word']) == 1", "entry_point": "find_smallest_integer"}
{"task_id": "test/3", "prompt": "def total_weight(lst):\n    '''Return the total weight from the given list'''\n", "canonical_solution": "    return sum(lst)", "test": "def check(candidate):\n    assert candidate([10, 20, 30, 40]) == 100\n    assert candidate([50, 60, 70, 80, 90]) == 350\n    assert candidate([2, 3, 5, 8, 13, 21]) == 52\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\n    assert candidate([0, 0, 0, 0, 0]) == 0", "entry_point": "total_weight"}
{"task_id": "test/4", "prompt": "def count_score(lst):\n    '''Return the total score from the given list of game scores'''\n", "canonical_solution": "    return sum(lst)", "test": "def check(candidate):\n    assert candidate([10, 20, 30, 40]) == 100\n    assert candidate([50, 60, 70, 80, 90]) == 350\n    assert candidate([2, 3, 5, 8, 13, 21]) == 52\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\n    assert candidate([0, 0, 0, 0, 0]) == 0", "entry_point": "count_score"}
{"task_id": "test/5", "prompt": "def find_max_size(lst):\n    '''Return the maximum size from the given list'''\n", "canonical_solution": "    return max(lst)", "test": "def check(candidate):\n    assert candidate([10, 20, 30, 40]) == 40\n    assert candidate([50, 60, 70, 80, 90]) == 90\n    assert candidate([2, 3, 5, 8, 13, 21]) == 21\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n    assert candidate([0, 0, 0, 0, 0]) == 0", "entry_point": "find_max_size"}
{"task_id": "test/6", "prompt": "def calculate_rectangle_area(length, width):\n    '''Return the area of a rectangle with given length and width'''\n", "canonical_solution": "    return length * width", "test": "def check(candidate):\n    assert candidate(3, 4) == 12\n    assert candidate(5, 5) == 25\n    assert candidate(6, 10) == 60\n    assert candidate(8, 2) == 16\n    assert candidate(0, 5) == 0", "entry_point": "calculate_rectangle_area"}
{"task_id": "test/7", "prompt": "def has_positive_number(lst):\n    '''Return True if the given list has at least one positive number, False otherwise'''\n", "canonical_solution": "    return any(num > 0 for num in lst)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([-1, -2, -3, 0, 1]) == True\n    assert candidate([0, -1, -2, -3]) == False\n    assert candidate([-1, -2, -3, -4, -5]) == False\n    assert candidate([]) == False", "entry_point": "has_positive_number"}
{"task_id": "test/8", "prompt": "def count_comments(s):\n    '''Return the number of comments in the given string'''\n", "canonical_solution": "    return s.count('#')", "test": "def check(candidate):\n    assert candidate('Hello # This is a comment') == 1\n    assert candidate('No comments here') == 0\n    assert candidate('#comment1\\n#comment2\\n#comment3') == 3\n    assert candidate('###') == 3\n    assert candidate('') == 0", "entry_point": "count_comments"}
{"task_id": "test/9", "prompt": "def count_integer_occurrences(lst):\n    '''Return the number of occurrences of the word 'integer' in the given list'''\n", "canonical_solution": "    return lst.count('integer')", "test": "def check(candidate):\n    assert candidate(['integer', 'string', 3, 4, 'integer']) == 2\n    assert candidate(['integer', 'word', 'integer', 'integer', 'integer']) == 4\n    assert candidate(['word', 'string', 0, 1, 2, 3, 'integer']) == 1\n    assert candidate(['word', 'string', 0, 1, 2, 3, 'word']) == 0\n    assert candidate(['integer', 'word', 'integer', 'integer', 'integer', 'string']) == 4", "entry_point": "count_integer_occurrences"}
{"task_id": "test/10", "prompt": "def count_color_scheme(colors):\n    '''Return the number of color schemes in the given list'''\n", "canonical_solution": "    return sum(1 for color in colors if 'color scheme' in color)", "test": "def check(candidate):\n    assert candidate(['red color scheme', 'blue color', 'green and yellow color scheme']) == 2\n    assert candidate(['color scheme 1', 'color scheme 2']) == 2\n    assert candidate([]) == 0\n    assert candidate(['purple', 'orange', 'color scheme 3', 'color scheme 4']) == 2\n    assert candidate(['color scheme 5', 'color scheme 6', 'color scheme 7']) == 3", "entry_point": "count_color_scheme"}
{"task_id": "test/11", "prompt": "def detect_input_devices(lst):\n    '''Return a list of input devices from the given list of devices'''\n", "canonical_solution": "    return [device for device in lst if 'input device' in device]", "test": "def check(candidate):\n    assert candidate(['mouse', 'keyboard', 'monitor', 'input device', 'printer']) == ['input device']\n    assert candidate(['input device 1', 'input device 2', 'speaker']) == ['input device 1', 'input device 2']\n    assert candidate(['camera', 'scanner', 'input device 3', 'projector', 'input device 4']) == ['input device 3', 'input device 4']\n    assert candidate(['mic', 'input device 5', 'headset', 'input device 6', 'input device 7']) == ['input device 5', 'input device 6', 'input device 7']\n    assert candidate(['input device 8', 'input device 9', 'input device 10']) == ['input device 8', 'input device 9', 'input device 10']", "entry_point": "detect_input_devices"}
{"task_id": "test/12", "prompt": "def count_dog_occurrences(lst):\n    '''Return the number of occurrences of the word 'dog' in the given list'''\n", "canonical_solution": "    return lst.count('dog')", "test": "def check(candidate):\n    assert candidate(['cat', 'dog', 3, 4, 'dog']) == 2\n    assert candidate(['dog', 'word', 'dog', 'dog', 'dog']) == 4\n    assert candidate(['word', 'string', 0, 1, 2, 3, 'dog']) == 1\n    assert candidate(['word', 'string', 0, 1, 2, 3, 'word']) == 0\n    assert candidate(['dog', 'word', 'dog', 'dog', 'dog', 'string']) == 4", "entry_point": "count_dog_occurrences"}
{"task_id": "test/13", "prompt": "def has_positive_even_number(lst):\n    '''Return True if the given list has at least one positive even number, False otherwise'''\n", "canonical_solution": "    return any(num > 0 and num % 2 == 0 for num in lst)", "test": "def check(candidate):\n    assert candidate([2, 4, 6, 8, 10]) == True\n    assert candidate([1, 3, 5, 7, 9]) == False\n    assert candidate([0, 2, 4, 6, 8, 10]) == True\n    assert candidate([-2, -4, 0, 2, 4, 6, 8, 10]) == True\n    assert candidate([]) == False", "entry_point": "has_positive_even_number"}
{"task_id": "test/14", "prompt": "def count_image_occurrences(lst):\n    '''Return the number of occurrences of the word 'image' in the given list'''\n", "canonical_solution": "    return lst.count('image')", "test": "def check(candidate):\n    assert candidate(['image', 'photo', 3, 4, 'digital image']) == 1\n    assert candidate(['image', 'word', 'image', 'image', 'image']) == 4\n    assert candidate(['word', 'string', 0, 1, 2, 3, 'image']) == 1\n    assert candidate(['word', 'string', 0, 1, 2, 'word']) == 0\n    assert candidate(['image', 'digital image', 'photo', 'image', 'design', 'image']) == 3", "entry_point": "count_image_occurrences"}
{"task_id": "test/15", "prompt": "def has_graphics_card(lst):\n    '''Return True if the given list has a graphics card, False otherwise'''\n", "canonical_solution": "    return any('graphics card' in device for device in lst)", "test": "def check(candidate):\n    assert candidate(['keyboard', 'mouse', 'monitor']) == False\n    assert candidate(['graphics card', 'keyboard', 'printer']) == True\n    assert candidate(['graphics card 1', 'speaker', 'graphics card 2']) == True\n    assert candidate(['graphics card 3', 'projector', 'scanner']) == True\n    assert candidate(['mic', 'input device', 'graphics card 4']) == True", "entry_point": "has_graphics_card"}
{"task_id": "test/16", "prompt": "def find_max_less_than_or_equal(lst, num):\n    '''Return the maximum number from the given list that is less than or equal to the given number'''\n", "canonical_solution": "    return max([x for x in lst if x <= num])", "test": "def check(candidate):\n    assert candidate([10, 20, 30, 40], 25) == 20\n    assert candidate([50, 60, 70, 80, 90], 55) == 50\n    assert candidate([2, 3, 5, 8, 13, 21], 10) == 8\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 5\n    assert candidate([0, 0, 0, 0, 0], 5) == 0", "entry_point": "find_max_less_than_or_equal"}
{"task_id": "test/17", "prompt": "def contains_false(lst):\n    '''Return True if the given list contains the value False, False otherwise'''\n", "canonical_solution": "    return any(item == False for item in lst)", "test": "def check(candidate):\n    assert candidate([True, False, True]) == True\n    assert candidate([True, True, True]) == False\n    assert candidate([False, False, False, False]) == True\n    assert candidate([True, 'False', 0, False]) == True\n    assert candidate([]) == False", "entry_point": "contains_false"}
{"task_id": "test/18", "prompt": "def count_hardware_items(lst):\n    '''Return the number of hardware items in the given list'''\n", "canonical_solution": "    return sum(1 for item in lst if 'hardware' in item)", "test": "def check(candidate):\n    assert candidate(['hardware 1', 'software', 'hardware 2']) == 2\n    assert candidate(['hardware 3', 'hardware 4', 'hardware 5']) == 3\n    assert candidate([]) == 0\n    assert candidate(['hardware 6', 'hardware 7', 'keyboard', 'mouse', 'monitor']) == 2\n    assert candidate(['printer', 'hardware item', 'scanner', 'graphics card', 'input device']) == 1", "entry_point": "count_hardware_items"}
{"task_id": "test/19", "prompt": "def has_boolean_value(lst):\n    '''Return True if the given list contains a boolean value, False otherwise'''\n", "canonical_solution": "    return any(isinstance(x, bool) for x in lst)", "test": "def check(candidate):\n    assert candidate([True, False, True, True, False]) == True\n    assert candidate([1, 3, 5, 7, 9]) == False\n    assert candidate([True, 1, False, 'boolean']) == True\n    assert candidate([0, False, 0, 1, True]) == True\n    assert candidate([]) == False", "entry_point": "has_boolean_value"}
{"task_id": "test/20", "prompt": "def has_false_value(lst):\n    '''Return True if the given list contains the boolean value False, False otherwise'''\n", "canonical_solution": "    return False in lst", "test": "def check(candidate):\n    assert candidate([True, False, True, True, False]) == True\n    assert candidate([1, 3, 5, 7, 9]) == False\n    assert candidate([True, 1, False, 'boolean']) == True\n    assert candidate([0, False, 0, 1, True]) == True\n    assert candidate([]) == False", "entry_point": "has_false_value"}
{"task_id": "test/21", "prompt": "def count_color_occurrences(lst):\n    '''Return the number of occurrences of the word 'color' in the given list'''\n", "canonical_solution": "    return sum(1 for item in lst if 'color' in str(item))", "test": "def check(candidate):\n    assert candidate(['red color', 'blue color', 'green and yellow', 'colorful']) == 3\n    assert candidate(['colorful', 'colorful', 'colorful', 'colorful']) == 4\n    assert candidate([]) == 0\n    assert candidate(['color', 'red', 'blue', 'green']) == 1\n    assert candidate(['pink', 'purple', 'yellow']) == 0", "entry_point": "count_color_occurrences"}
{"task_id": "test/22", "prompt": "def has_animation(lst):\n    '''Return True if the given list contains an animation, False otherwise'''\n", "canonical_solution": "    return any('animation' in item for item in lst)", "test": "def check(candidate):\n    assert candidate(['movie', 'cartoon', 'documentary', 'animation']) == True\n    assert candidate(['comedy', 'thriller', 'drama']) == False\n    assert candidate(['animation 1', 'animation 2', 'animation 3']) == True\n    assert candidate(['sci-fi', 'fantasy', 'horror', 'animation']) == True\n    assert candidate(['adventure', 'action', 'animation 4']) == True", "entry_point": "has_animation"}
{"task_id": "test/23", "prompt": "def max_height(lst):\n    '''Return the maximum height from the given list of heights'''\n", "canonical_solution": "    return max(lst)", "test": "def check(candidate):\n    assert candidate([150, 160, 170, 180, 190]) == 190\n    assert candidate([165, 175, 155, 185, 145]) == 185\n    assert candidate([200, 175, 190, 180, 165, 170]) == 200\n    assert candidate([140, 145, 150, 155, 160, 165, 170]) == 170\n    assert candidate([180]) == 180", "entry_point": "max_height"}
{"task_id": "test/24", "prompt": "def count_storage_items(lst):\n    '''Return the number of storage items in the given list'''\n", "canonical_solution": "    return sum(1 for item in lst if 'storage' in item)", "test": "def check(candidate):\n    assert candidate(['storage device', 'memory storage', 'data storage', 'storage container']) == 4\n    assert candidate(['storage unit', 'storage space']) == 2\n    assert candidate([]) == 0\n    assert candidate(['storage room', 'storage closet', 'shelves', 'storage bin']) == 3\n    assert candidate(['cabinets', 'shelving unit', 'organization system']) == 0", "entry_point": "count_storage_items"}
{"task_id": "test/25", "prompt": "def calculate_cuboid_volume(length, width, height):\n    '''Return the volume of a cuboid with given length, width, and height'''\n", "canonical_solution": "    return length * width * height", "test": "def check(candidate):\n    assert candidate(3, 4, 5) == 60\n    assert candidate(2, 2, 2) == 8\n    assert candidate(6, 3, 2) == 36\n    assert candidate(8, 2, 4) == 64\n    assert candidate(0, 5, 5) == 0", "entry_point": "calculate_cuboid_volume"}
{"task_id": "test/26", "prompt": "def count_website_occurrences(lst):\n    '''Return the number of occurrences of the word 'website' in the given list'''\n", "canonical_solution": "    return sum(1 for item in lst if 'website' in str(item))", "test": "def check(candidate):\n    assert candidate(['website link', 'personal website', 'website design', 'website development']) == 4\n    assert candidate(['website homepage', 'website search', 'webpage']) == 2\n    assert candidate([]) == 0\n    assert candidate(['website', 'web', 'page']) == 1\n    assert candidate(['page', 'internet', 'webpage']) == 0", "entry_point": "count_website_occurrences"}
{"task_id": "test/27", "prompt": "def sum_array(arr):\n    '''Return the sum of all elements in the given array'''\n", "canonical_solution": "    return sum(arr)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 15\n    assert candidate([10, 20, 30]) == 60\n    assert candidate([0, 0, 0, 0, 0]) == 0\n    assert candidate([3, 6, 9, 12]) == 30\n    assert candidate([-1, 0, 1]) == 0", "entry_point": "sum_array"}
{"task_id": "test/28", "prompt": "def contains_application(lst):\n    '''Return True if the given list contains the word 'application', False otherwise'''\n", "canonical_solution": "    return any('application' in item for item in lst)", "test": "def check(candidate):\n    assert candidate(['web application', 'mobile application', 'desktop application']) == True\n    assert candidate(['application form', 'application process', 'application deadline']) == True\n    assert candidate(['software', 'program', 'app']) == False\n    assert candidate(['application', 'app', 'software']) == True\n    assert candidate([]) == False", "entry_point": "contains_application"}
{"task_id": "test/29", "prompt": "def count_hexagons(shapes):\n    '''Return the number of hexagons in the given list of shapes'''\n", "canonical_solution": "    return shapes.count('hexagon')", "test": "def check(candidate):\n    assert candidate(['circle', 'triangle', 'square', 'hexagon', 'hexagon']) == 2\n    assert candidate(['hexagon', 'circle', 'hexagon', 'hexagon']) == 3\n    assert candidate(['rectangle', 'hexagon', 'pentagon', 'hexagon', 'hexagon']) == 3\n    assert candidate(['hexagon', 'hexagon']) == 2\n    assert candidate([]) == 0", "entry_point": "count_hexagons"}
{"task_id": "test/30", "prompt": "def count_output_occurrences(lst):\n    '''Return the number of occurrences of the word 'output' in the given list'''\n", "canonical_solution": "    return sum(1 for item in lst if 'output' in str(item))", "test": "def check(candidate):\n    assert candidate(['output file', 'print output', 'text output', 'output result']) == 4\n    assert candidate(['output format', 'text', 'result']) == 1\n    assert candidate([]) == 0\n    assert candidate(['output stream', 'print', 'output display']) == 2\n    assert candidate(['text', 'result', 'display']) == 0", "entry_point": "count_output_occurrences"}
{"task_id": "test/31", "prompt": "def count_data_type_occurrences(lst):\n    '''Return the number of occurrences of the word 'data type' in the given list'''\n", "canonical_solution": "    return sum(1 for item in lst if 'data type' in str(item))", "test": "def check(candidate):\n    assert candidate(['data type', 'data type', 'string', 'integer', 'data type']) == 3\n    assert candidate(['data type', 'boolean', 'data type', 'data type']) == 3\n    assert candidate([]) == 0\n    assert candidate(['data type', 'data type', 'list', 'dictionary']) == 2\n    assert candidate(['data type', 'data type', 'tuple', 'set', 'data type']) == 3", "entry_point": "count_data_type_occurrences"}
{"task_id": "test/32", "prompt": "def contains_client(lst):\n    '''Return True if the given list contains the word 'client', False otherwise'''\n", "canonical_solution": "    return any('client' in item for item in lst)", "test": "def check(candidate):\n    assert candidate(['client list', 'new client', 'client satisfaction', 'client service']) == True\n    assert candidate(['client management', 'client engagement', 'client relations']) == True\n    assert candidate(['customer', 'consumer', 'user']) == False\n    assert candidate(['client', 'consumer', 'customer']) == True\n    assert candidate([]) == False", "entry_point": "contains_client"}
{"task_id": "test/33", "prompt": "def has_search_keyword(lst):\n    '''Return True if the given list contains the search keyword, False otherwise'''\n", "canonical_solution": "    return any('search' in item for item in lst)", "test": "def check(candidate):\n    assert candidate(['search engine', 'web search', 'search history']) == True\n    assert candidate(['search bar', 'search button', 'search field']) == True\n    assert candidate(['find', 'locate', 'seek']) == False\n    assert candidate(['search', 'searchable', 'searched']) == True\n    assert candidate([]) == False", "entry_point": "has_search_keyword"}
{"task_id": "test/34", "prompt": "def has_specific_data_type(lst, data_type):\n    '''Return True if the given list contains a specific data type, False otherwise'''\n", "canonical_solution": "    return any(isinstance(x, data_type) for x in lst)", "test": "def check(candidate):\n    assert candidate([1, 'a', 3.5, True], int) == True\n    assert candidate([1, 'a', 3.5, True], str) == True\n    assert candidate([1, 'a', 3.5, True], float) == True\n    assert candidate([1, 'a', 3.5, True], bool) == True\n    assert candidate([1, 'a', 3.5, True], list) == False", "entry_point": "has_specific_data_type"}
{"task_id": "test/35", "prompt": "def has_database(lst):\n    '''Return True if the given list contains the word 'database', False otherwise'''\n", "canonical_solution": "    return any('database' in item for item in lst)", "test": "def check(candidate):\n    assert candidate(['customer database', 'employee database', 'sales database']) == True\n    assert candidate(['product inventory', 'financial records']) == False\n    assert candidate(['database 1', 'database 2', 'database 3']) == True\n    assert candidate(['user profile', 'transaction history', 'customer']) == False\n    assert candidate([]) == False", "entry_point": "has_database"}
{"task_id": "test/36", "prompt": "def has_website(lst):\n    '''Return True if the given list contains the word 'website', False otherwise'''\n", "canonical_solution": "    return any('website' in item for item in lst)", "test": "def check(candidate):\n    assert candidate(['personal website', 'business website', 'portfolio website']) == True\n    assert candidate(['web application', 'shopping cart', 'search engine']) == False\n    assert candidate(['blog', 'forum', 'website']) == True\n    assert candidate(['photo gallery', 'online store', 'community site']) == False\n    assert candidate([]) == False", "entry_point": "has_website"}
{"task_id": "test/37", "prompt": "def count_squares(shapes):\n    '''Return the number of squares in the given list of shapes'''\n", "canonical_solution": "    return shapes.count('square')", "test": "def check(candidate):\n    assert candidate(['circle', 'triangle', 'square', 'square']) == 2\n    assert candidate(['square', 'circle', 'square', 'square']) == 3\n    assert candidate(['rectangle', 'square', 'pentagon', 'square', 'square']) == 3\n    assert candidate(['square', 'square']) == 2\n    assert candidate([]) == 0", "entry_point": "count_squares"}
{"task_id": "test/38", "prompt": "def find_largest_in_array(arr):\n    '''Return the largest number from the given array'''\n", "canonical_solution": "    return max(arr)", "test": "def check(candidate):\n    assert candidate([3, 7, 2, 9, 1, 5]) == 9\n    assert candidate([15, 20, 5, 35, 25]) == 35\n    assert candidate([8, 13, 21, 34, 55, 2, 3]) == 55\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n    assert candidate([0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0", "entry_point": "find_largest_in_array"}
{"task_id": "test/39", "prompt": "def calculate_shape_area(side):\n    '''Return the area of a square with the given side length'''\n", "canonical_solution": "    return side * side", "test": "def check(candidate):\n    assert candidate(3) == 9\n    assert candidate(5) == 25\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n    assert candidate(0) == 0", "entry_point": "calculate_shape_area"}
