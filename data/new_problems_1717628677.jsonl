{"task_id": "test/1", "prompt": "def product_of_constant_and_number(constant, number):\n", "canonical_solution": "    return constant * number", "test": "def check(candidate):\n    assert candidate(2, 3) == 6\n    assert candidate(5, 5) == 25\n    assert candidate(4, 0) == 0\n    assert candidate(10, -1) == -10\n    assert candidate(-3, -2) == 6", "entry_point": "product_of_constant_and_number"}
{"task_id": "test/2", "prompt": "def average_download_speed(total_downloaded_data, time_taken):\n    '''Calculate the average download speed in a network\n    Args:\n        total_downloaded_data (float): Total data downloaded in MB\n        time_taken (float): Time taken to download the data in seconds\n    Returns:\n        float: Average download speed in Mbps\n    '''\n", "canonical_solution": "    return total_downloaded_data / time_taken", "test": "def check(candidate):\n    assert abs(candidate(100, 10) - 10.0) < 0.01\n    assert abs(candidate(2048, 32) - 64.0) < 0.01\n    assert abs(candidate(512, 8) - 64.0) < 0.01\n    assert abs(candidate(1024, 20) - 51.2) < 0.01\n    assert abs(candidate(500, 5) - 100.0) < 0.01", "entry_point": "average_download_speed"}
{"task_id": "test/3", "prompt": "def calculate_total_cost(price, quantity):\n    '''Calculate the total cost of items\n    Args:\n        price (float): Price of each item\n        quantity (int): Number of items purchased\n    Returns:\n        float: Total cost of items\n    '''\n", "canonical_solution": "    return price * quantity", "test": "def check(candidate):\n    assert abs(candidate(10.0, 5) - 50.0) < 0.01\n    assert abs(candidate(2.5, 4) - 10.0) < 0.01\n    assert abs(candidate(1.25, 8) - 10.0) < 0.01\n    assert abs(candidate(20.0, 3) - 60.0) < 0.01\n    assert abs(candidate(5.0, 7) - 35.0) < 0.01", "entry_point": "calculate_total_cost"}
{"task_id": "test/4", "prompt": "def multiply_by_constant_and_addition(number, constant, addition):\n    '''Multiply a number by a constant and then add an addition\n    Args:\n        number (float): The number to be operated on\n        constant (float): The constant to multiply by\n        addition (float): The value to add after multiplication\n    Returns:\n        float: The result after multiplication and addition\n    '''\n", "canonical_solution": "    return number * constant + addition", "test": "def check(candidate):\n    assert candidate(5, 2, 3) == 13\n    assert candidate(10, 1.5, 5) == 20\n    assert candidate(4, 0.5, 2) == 4\n    assert candidate(8, -1, 10) == 2\n    assert candidate(-3, -2, 4) == 10", "entry_point": "multiply_by_constant_and_addition"}
{"task_id": "test/5", "prompt": "def logout_user(username):\n    '''Simulate the logout of a user\n    Args:\n        username (str): The username of the user to logout\n    Returns:\n        str: A message confirming the logout\n    '''\n", "canonical_solution": "    return f'{username} has been logged out successfully'", "test": "def check(candidate):\n    assert candidate('user1') == 'user1 has been logged out successfully'\n    assert candidate('admin') == 'admin has been logged out successfully'\n    assert candidate('customer123') == 'customer123 has been logged out successfully'\n    assert candidate('john_doe') == 'john_doe has been logged out successfully'\n    assert candidate('test_user') == 'test_user has been logged out successfully'", "entry_point": "logout_user"}
{"task_id": "test/6", "prompt": "def get_client_age(client_name, client_database):\n    '''Retrieve the age of a client from the database\n    Args:\n        client_name (str): The name of the client\n        client_database (dict): A dictionary containing client names as keys and their ages as values\n    Returns:\n        int: The age of the client\n    '''\n", "canonical_solution": "    return client_database.get(client_name, 'Client not found')", "test": "def check(candidate):\n    age_database = {'Alice': 25, 'Bob': 30, 'Eve': 22}\n    assert candidate('Alice', age_database) == 25\n    assert candidate('Bob', age_database) == 30\n    assert candidate('Eve', age_database) == 22\n    assert candidate('David', age_database) == 'Client not found'\n    assert candidate('Grace', age_database) == 'Client not found'", "entry_point": "get_client_age"}
{"task_id": "test/7", "prompt": "def is_less_than_or_equal(a, b):\n    '''Check if a is less than or equal to b\n    Args:\n        a (int): First number\n        b (int): Second number\n    Returns:\n        bool: True if a is less than or equal to b, False otherwise\n    '''\n", "canonical_solution": "    return a <= b", "test": "def check(candidate):\n    assert candidate(5, 5) == True\n    assert candidate(4, 3) == False\n    assert candidate(-2, -2) == True\n    assert candidate(10, 8) == False\n    assert candidate(0, 10) == True", "entry_point": "is_less_than_or_equal"}
{"task_id": "test/8", "prompt": "def calculate_total_points(scores, bonus):\n    '''Calculate the total points in a game\n    Args:\n        scores (list): List of individual scores\n        bonus (int): Bonus points to be added\n    Returns:\n        int: Total points achieved in the game\n    '''\n", "canonical_solution": "    return sum(scores) + bonus", "test": "def check(candidate):\n    assert candidate([10, 15, 8, 12], 5) == 50\n    assert candidate([5, 3, 7, 9], 10) == 34\n    assert candidate([20, 25, 18, 22], 8) == 93\n    assert candidate([12, 17, 30, 25], 15) == 99\n    assert candidate([8, 10, 12, 5], 20) == 55", "entry_point": "calculate_total_points"}
{"task_id": "test/9", "prompt": "def binary_search(arr, target):\n    '''Search for the target value in a sorted array using binary search\n    Args:\n        arr (list): A sorted list of integers\n        target (int): The value to search for in the array\n    Returns:\n        int: The index of the target value in the array, or -1 if not found\n    '''\n", "canonical_solution": "    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 9], 3) == 1\n    assert candidate([1, 3, 5, 7, 9], 5) == 2\n    assert candidate([1, 3, 5, 7, 9], 2) == -1\n    assert candidate([1, 3, 5, 7, 9], 9) == 4\n    assert candidate([1, 3, 5, 7, 9], 8) == -1", "entry_point": "binary_search"}
{"task_id": "test/10", "prompt": "def calculate_average(numbers):\n    '''Calculate the average of a list of numbers\n    Args:\n        numbers (list): List of numbers\n    Returns:\n        float: The average of the numbers\n    '''\n", "canonical_solution": "    return sum(numbers) / len(numbers)", "test": "def check(candidate):\n    assert abs(candidate([1, 2, 3, 4]) - 2.5) < 0.01\n    assert abs(candidate([10, 20, 30, 40, 50]) - 30.0) < 0.01\n    assert abs(candidate([2, 4, 6, 8, 10]) - 6.0) < 0.01\n    assert abs(candidate([5, 10, 15]) - 10.0) < 0.01\n    assert abs(candidate([100, 200, 300, 400, 500]) - 300.0) < 0.01", "entry_point": "calculate_average"}
{"task_id": "test/11", "prompt": "def calculate_total_pixel_value(image_pixels):\n    '''Calculate the total value of all pixels in an image\n    Args:\n        image_pixels (list): List of pixel values in the image\n    Returns:\n        int: Total value of all the pixels\n    '''\n", "canonical_solution": "    return sum(image_pixels)", "test": "def check(candidate):\n    assert candidate([10, 20, 30, 40]) == 100\n    assert candidate([255, 255, 255, 255, 255]) == 1275\n    assert candidate([0, 0, 0, 0, 0]) == 0\n    assert candidate([100, 150, 200, 250]) == 700\n    assert candidate([31, 63, 127, 255]) == 476", "entry_point": "calculate_total_pixel_value"}
{"task_id": "test/12", "prompt": "def calculate_table_area(length, width):\n    '''Calculate the area of a table\n    Args:\n        length (float): The length of the table\n        width (float): The width of the table\n    Returns:\n        float: The area of the table\n    '''\n", "canonical_solution": "    return length * width", "test": "def check(candidate):\n    assert candidate(5, 3) == 15\n    assert candidate(10, 4) == 40\n    assert candidate(4, 4) == 16\n    assert candidate(8, 2) == 16\n    assert candidate(7, 5) == 35", "entry_point": "calculate_table_area"}
{"task_id": "test/13", "prompt": "def minimum_of_numbers(num1, num2, num3):\n    '''Find the minimum of three numbers\n    Args:\n        num1 (int): First number\n        num2 (int): Second number\n        num3 (int): Third number\n    Returns:\n        int: The minimum of the three numbers\n    '''\n", "canonical_solution": "    return min(num1, num2, num3)", "test": "def check(candidate):\n    assert candidate(3, 5, 7) == 3\n    assert candidate(10, 2, 6) == 2\n    assert candidate(8, 12, 4) == 4\n    assert candidate(15, 20, 10) == 10\n    assert candidate(17, 15, 20) == 15", "entry_point": "minimum_of_numbers"}
{"task_id": "test/14", "prompt": "def calculate_cuboid_volume(length, width, height):\n    '''Calculate the volume of a cuboid\n    Args:\n        length (float): Length of the cuboid\n        width (float): Width of the cuboid\n        height (float): Height of the cuboid\n    Returns:\n        float: Volume of the cuboid\n    '''\n", "canonical_solution": "    return length * width * height", "test": "def check(candidate):\n    assert candidate(2, 3, 4) == 24\n    assert candidate(5, 5, 5) == 125\n    assert candidate(10, 2, 6) == 120\n    assert candidate(8, 12, 4) == 384\n    assert candidate(7, 6, 3) == 126", "entry_point": "calculate_cuboid_volume"}
{"task_id": "test/15", "prompt": "def calculate_bike_speed(distance, time):\n    '''Calculate the speed of a bike\n    Args:\n        distance (float): Distance travelled by the bike in kilometers\n        time (float): Time taken to cover the distance in hours\n    Returns:\n        float: Speed of the bike in kilometers per hour\n    '''\n", "canonical_solution": "    return distance / time", "test": "def check(candidate):\n    assert abs(candidate(30, 2) - 15.0) < 0.01\n    assert abs(candidate(40, 1.5) - 26.6666) < 0.01\n    assert abs(candidate(10, 0.5) - 20.0) < 0.01\n    assert abs(candidate(25, 1) - 25.0) < 0.01\n    assert abs(candidate(20, 0.75) - 26.6666) < 0.01", "entry_point": "calculate_bike_speed"}
{"task_id": "test/16", "prompt": "def calculate_pixel_intensity(image_pixels):\n    '''Calculate the average intensity of pixel values in an image\n    Args:\n        image_pixels (list): List of pixel intensities in the image\n    Returns:\n        float: The average intensity of pixel values\n    '''\n", "canonical_solution": "    return sum(image_pixels) / len(image_pixels)", "test": "def check(candidate):\n    assert abs(candidate([100, 200, 50, 75]) - 106.25) < 0.01\n    assert abs(candidate([255, 255, 255, 255, 255]) - 255.0) < 0.01\n    assert abs(candidate([0, 0, 0, 0, 0]) - 0.0) < 0.01\n    assert abs(candidate([150, 150, 150, 150]) - 150.0) < 0.01\n    assert abs(candidate([31, 63, 127, 255]) - 119.0) < 0.01", "entry_point": "calculate_pixel_intensity"}
{"task_id": "test/17", "prompt": "def find_color_in_palette(palette, color):\n    '''Search for a specific color in a palette\n    Args:\n        palette (list): List of colors in the palette\n        color (str): The color to search for\n    Returns:\n        bool: True if the color is found, False otherwise\n    '''\n", "canonical_solution": "    return color in palette", "test": "def check(candidate):\n    assert candidate(['red', 'green', 'blue', 'yellow'], 'green') == True\n    assert candidate(['red', 'green', 'blue', 'yellow'], 'purple') == False\n    assert candidate(['pink', 'purple', 'orange', 'black'], 'orange') == True\n    assert candidate(['red', 'blue', 'yellow', 'black'], 'red') == True\n    assert candidate(['violet', 'indigo', 'green', 'pink'], 'brown') == False", "entry_point": "find_color_in_palette"}
{"task_id": "test/18", "prompt": "def calculate_total_game_score(player_scores, bonus):\n    '''Calculate the total score achieved in a game\n    Args:\n        player_scores (list): List of individual scores obtained by players\n        bonus (int): Bonus points to be added\n    Returns:\n        int: Total score achieved in the game\n    '''\n", "canonical_solution": "    return sum(player_scores) + bonus", "test": "def check(candidate):\n    assert candidate([10, 15, 8, 12], 5) == 50\n    assert candidate([5, 3, 7, 9], 10) == 34\n    assert candidate([20, 25, 18, 22], 8) == 93\n    assert candidate([12, 17, 30, 25], 15) == 99\n    assert candidate([8, 10, 12, 5], 20) == 55", "entry_point": "calculate_total_game_score"}
{"task_id": "test/19", "prompt": "def search_element_in_list(elements, target):\n    '''Search for a specific element in a list\n    Args:\n        elements (list): List of elements\n        target : The element to search for\n    Returns:\n        bool: True if the element is found, False otherwise\n    '''\n", "canonical_solution": "    return target in elements", "test": "def check(candidate):\n    assert candidate(['apple', 'banana', 'orange', 'grape'], 'banana') == True\n    assert candidate(['red', 'green', 'blue', 'yellow'], 'purple') == False\n    assert candidate(['cat', 'dog', 'rabbit', 'hamster'], 'rabbit') == True\n    assert candidate(['1', '2', '3', '4', '5'], '6') == False\n    assert candidate(['python', 'java', 'c++', 'ruby'], 'java') == True", "entry_point": "search_element_in_list"}
{"task_id": "test/20", "prompt": "def calculate_total_size(file_sizes):\n    '''Calculate the total size of multiple files\n    Args:\n        file_sizes (list): List of sizes of individual files\n    Returns:\n        int: Total size of all the files\n    '''\n", "canonical_solution": "    return sum(file_sizes)", "test": "def check(candidate):\n    assert candidate([1024, 2048, 4096]) == 7168\n    assert candidate([512, 256, 1024, 2048]) == 3840\n    assert candidate([4096, 8192, 16384]) == 28672\n    assert candidate([128, 256, 512, 1024, 2048]) == 3968\n    assert candidate([256, 512, 1024, 2048, 4096, 8192]) == 16128", "entry_point": "calculate_total_size"}
{"task_id": "test/21", "prompt": "def calculate_rectangle_area(length, width):\n    '''Calculate the area of a rectangle\n    Args:\n        length (float): The length of the rectangle\n        width (float): The width of the rectangle\n    Returns:\n        float: The area of the rectangle\n    '''\n", "canonical_solution": "    return length * width", "test": "def check(candidate):\n    assert candidate(3, 5) == 15\n    assert candidate(10, 4) == 40\n    assert candidate(8, 12) == 96\n    assert candidate(15, 7) == 105\n    assert candidate(17, 15) == 255", "entry_point": "calculate_rectangle_area"}
{"task_id": "test/22", "prompt": "def calculate_frames_per_second(total_frames, total_time):\n    '''Calculate the frames per second of a graphics animation\n    Args:\n        total_frames (int): Total frames rendered\n        total_time (float): Total time taken to render the frames in seconds\n    Returns:\n        float: Frames per second of the graphics animation\n    '''\n", "canonical_solution": "    return total_frames / total_time", "test": "def check(candidate):\n    assert abs(candidate(60, 2.5) - 24.0) < 0.01\n    assert abs(candidate(120, 5) - 24.0) < 0.01\n    assert abs(candidate(30, 1.5) - 20.0) < 0.01\n    assert abs(candidate(100, 2.5) - 40.0) < 0.01\n    assert abs(candidate(45, 3) - 15.0) < 0.01", "entry_point": "calculate_frames_per_second"}
{"task_id": "test/23", "prompt": "def count_bananas(sentence):\n    '''Count the occurrences of the word 'banana' in a sentence\n    Args:\n        sentence (str): The input sentence\n    Returns:\n        int: The number of times the word 'banana' appears in the sentence\n    '''\n", "canonical_solution": "    return sentence.lower().count('banana')", "test": "def check(candidate):\n    assert candidate('I love eating bananas, my favorite fruit') == 1\n    assert candidate('bananaBananaBANAnaBanana') == 4\n    assert candidate('The banana bunch is yellow and ripe') == 1\n    assert candidate('She gave me a banana yesterday') == 1\n    assert candidate('Bananarama is my favorite band and I love their music') == 1", "entry_point": "count_bananas"}
{"task_id": "test/24", "prompt": "def calculate_experience_level(experience_points):\n    '''Calculate the level based on experience points\n    Args:\n        experience_points (int): The total experience points earned\n    Returns:\n        int: The level achieved based on experience points\n    '''\n", "canonical_solution": "    return experience_points // 1000", "test": "def check(candidate):\n    assert candidate(3000) == 3\n    assert candidate(5000) == 5\n    assert candidate(1500) == 1\n    assert candidate(8000) == 8\n    assert candidate(2500) == 2", "entry_point": "calculate_experience_level"}
{"task_id": "test/25", "prompt": "def calculate_animation_duration(frames, frames_per_second):\n    '''Calculate the total duration of an animation\n    Args:\n        frames (int): Total frames in the animation\n        frames_per_second (float): Frames per second of the animation\n    Returns:\n        float: Total duration of the animation in seconds\n    '''\n", "canonical_solution": "    return frames / frames_per_second", "test": "def check(candidate):\n    assert abs(candidate(120, 24) - 5.0) < 0.01\n    assert abs(candidate(180, 30) - 6.0) < 0.01\n    assert abs(candidate(200, 40) - 5.0) < 0.01\n    assert abs(candidate(240, 48) - 5.0) < 0.01\n    assert abs(candidate(150, 25) - 6.0) < 0.01", "entry_point": "calculate_animation_duration"}
{"task_id": "test/26", "prompt": "def find_greater_number(numbers, target):\n    '''Find all numbers greater than a target number in a list\n    Args:\n        numbers (list): List of numbers\n        target : The target number to compare against\n    Returns:\n        list: List of numbers greater than the target number\n    '''\n", "canonical_solution": "    return [num for num in numbers if num > target]", "test": "def check(candidate):\n    assert candidate([5, 10, 15, 20, 25], 15) == [20, 25]\n    assert candidate([100, 200, 300, 400, 500], 250) == [300, 400, 500]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10]\n    assert candidate([10, 20, 30, 40, 50], 55) == []\n    assert candidate([5, 15, 25, 35, 45], 20) == [25, 35, 45]", "entry_point": "find_greater_number"}
{"task_id": "test/27", "prompt": "def count_banana_occurrences(text):\n    '''Count the occurrences of the word 'banana' in a given text\n    Args:\n        text (str): The input text\n    Returns:\n        int: The number of times 'banana' appears in the text\n    '''\n", "canonical_solution": "    return text.lower().count('banana')", "test": "def check(candidate):\n    assert candidate('banana') == 1\n    assert candidate('banana banana') == 2\n    assert candidate('I ate a banana.') == 1\n    assert candidate('I have a banana and a banana peel.') == 2\n    assert candidate('There are bananas and bananas everywhere!') == 2", "entry_point": "count_banana_occurrences"}
{"task_id": "test/28", "prompt": "def calculate_experience_points(level, difficulty):\n    '''Calculate the experience points earned based on level and difficulty\n    Args:\n        level (int): Player's level\n        difficulty (str): The difficulty of the game level\n    Returns:\n        int: Experience points earned\n    '''\n", "canonical_solution": "    if difficulty == 'easy':\n        return level * 10\n    elif difficulty == 'medium':\n        return level * 20\n    elif difficulty == 'hard':\n        return level * 30\n    else:\n        return 0", "test": "def check(candidate):\n    assert candidate(5, 'easy') == 50\n    assert candidate(8, 'medium') == 160\n    assert candidate(10, 'hard') == 300\n    assert candidate(15, 'easy') == 150\n    assert candidate(20, 'insane') == 0", "entry_point": "calculate_experience_points"}
{"task_id": "test/29", "prompt": "def calculate_modulo(a, b):\n    '''Calculate the modulo of two numbers\n    Args:\n        a (int): The dividend\n        b (int): The divisor\n    Returns:\n        int: The modulo of a and b\n    '''\n", "canonical_solution": "    return a % b", "test": "def check(candidate):\n    assert candidate(10, 3) == 1\n    assert candidate(17, 5) == 2\n    assert candidate(50, 7) == 1\n    assert candidate(30, 4) == 2\n    assert candidate(25, 4) == 1", "entry_point": "calculate_modulo"}
{"task_id": "test/30", "prompt": "def debug_output(input_string):\n    '''Find and count the occurrences of the word 'debug' in a given input string\n    Args:\n        input_string (str): The input string to analyze\n    Returns:\n        int: The number of times the word 'debug' appears in the input string\n    '''\n", "canonical_solution": "    return input_string.lower().count('debug')", "test": "def check(candidate):\n    assert candidate('I need to debug the code to find the issue') == 1\n    assert candidate('The debugger helped identify the problem and allow for easy debugging') == 2\n    assert candidate('Debugging is an essential part of software development') == 1\n    assert candidate('The debug log contains useful information') == 1\n    assert candidate('Debugging code can be challenging but rewarding') == 1", "entry_point": "debug_output"}
{"task_id": "test/31", "prompt": "def is_integer_multiple(number, multiple):\n    '''Check if a number is a multiple of another number\n    Args:\n        number (int): The number to check\n        multiple (int): The potential multiple\n    Returns:\n        bool: True if 'number' is a multiple of 'multiple', False otherwise\n    '''\n", "canonical_solution": "    return number % multiple == 0", "test": "def check(candidate):\n    assert candidate(10, 5) == True\n    assert candidate(15, 7) == False\n    assert candidate(20, 4) == True\n    assert candidate(25, 3) == False\n    assert candidate(30, 6) == True", "entry_point": "is_integer_multiple"}
{"task_id": "test/32", "prompt": "def get_video_length(video_file):\n    '''Retrieve the length of a video file\n    Args:\n        video_file (str): The name of the video file\n    Returns:\n        float: The length of the video in seconds\n    '''\n", "canonical_solution": "    # Assume some mechanism to obtain video length\n    return video_file + '_length'", "test": "def check(candidate):\n    assert candidate('video1.mp4') == 'video1.mp4_length'\n    assert candidate('intro.avi') == 'intro.avi_length'\n    assert candidate('movie.mkv') == 'movie.mkv_length'\n    assert candidate('trailer.mp4') == 'trailer.mp4_length'\n    assert candidate('clip.mov') == 'clip.mov_length'", "entry_point": "get_video_length"}
{"task_id": "test/33", "prompt": "def find_shape_in_list(shapes, target_shape):\n    '''Search for a specific shape in a list of shapes\n    Args:\n        shapes (list): List of shapes\n        target_shape (str): The shape to search for\n    Returns:\n        bool: True if the shape is found, False otherwise\n    '''\n", "canonical_solution": "    for shape in shapes:\n        if shape.lower() == target_shape.lower():\n            return True\n    return False", "test": "def check(candidate):\n    assert candidate(['circle', 'square', 'triangle', 'rectangle'], 'square') == True\n    assert candidate(['hexagon', 'pentagon', 'octagon', 'rhombus'], 'circle') == False\n    assert candidate(['star', 'heart', 'moon', 'diamond'], 'moon') == True\n    assert candidate(['oval', 'parallelogram', 'ellipse', 'trapezoid'], 'triangle') == False\n    assert candidate(['sphere', 'cube', 'cylinder', 'cone'], 'cube') == True", "entry_point": "find_shape_in_list"}
{"task_id": "test/34", "prompt": "def calculate_fuel_efficiency(distance, fuel):\n    '''Calculate the fuel efficiency of a car\n    Args:\n        distance (float): The total distance traveled by the car\n        fuel (float): The total fuel consumed by the car\n    Returns:\n        float: The fuel efficiency of the car in miles per gallon\n    '''\n", "canonical_solution": "    return distance / fuel", "test": "def check(candidate):\n    assert abs(candidate(300, 15) - 20.0) < 0.01\n    assert abs(candidate(400, 20) - 20.0) < 0.01\n    assert abs(candidate(250, 12.5) - 20.0) < 0.01\n    assert abs(candidate(500, 25) - 20.0) < 0.01\n    assert abs(candidate(600, 30) - 20.0) < 0.01", "entry_point": "calculate_fuel_efficiency"}
{"task_id": "test/35", "prompt": "def count_words_in_house_descriptions(descriptions):\n    '''Count the occurrences of the word 'house' in a list of descriptions\n    Args:\n        descriptions (list): List of strings describing houses\n    Returns:\n        int: The total number of times the word 'house' appears in the descriptions\n    '''\n", "canonical_solution": "    count = 0\n    for desc in descriptions:\n        count += desc.lower().count('house')\n    return count", "test": "def check(candidate):\n    assert candidate(['This is a beautiful house.', 'The house has a big garden.', 'The brown house is on the corner.']) == 3\n    assert candidate(['I want to buy a house in the suburbs.', 'The old house needs renovation.', 'A house with a pool would be perfect.']) == 3\n    assert candidate(['The white house on the hill is haunted.', 'This house has been on the market for months.']) == 2\n    assert candidate(['The house by the lake is for sale.', 'The yellow house needs a fresh coat of paint.','The big house at the end of the street is abandoned.']) == 3\n    assert candidate(['The small house with the red door is cozy.', 'The modern house has a sleek design.', 'The house from the 1800s has historical significance.']) == 3", "entry_point": "count_words_in_house_descriptions"}
{"task_id": "test/36", "prompt": "def is_boss_in_company(employee_list, boss_name):\n    '''Check if the boss is present in the company employee list\n    Args:\n        employee_list (list): List of employee names\n        boss_name (str): The name of the boss\n    Returns:\n        bool: True if the boss is present in the employee list, False otherwise\n    '''\n", "canonical_solution": "    return boss_name in employee_list", "test": "def check(candidate):\n    assert candidate(['Alice', 'Bob', 'Eve', 'David'], 'Bob') == True\n    assert candidate(['Alice', 'Carol', 'Eve', 'Frank'], 'David') == False\n    assert candidate(['Grace', 'Ivy', 'Bob', 'Kent'], 'Bob') == True\n    assert candidate(['Eve', 'Frank', 'Grace', 'Hannah'], 'Karen') == False\n    assert candidate(['Ivy', 'Kent', 'Lisa', 'Mary'], 'Lisa') == True", "entry_point": "is_boss_in_company"}
{"task_id": "test/37", "prompt": "def calculate_circle_area(radius):\n    '''Calculate the area of a circle\n    Args:\n        radius (float): The radius of the circle\n    Returns:\n        float: The area of the circle\n    '''\n", "canonical_solution": "    return 3.14159 * radius**2", "test": "def check(candidate):\n    assert abs(candidate(3) - 28.27431) < 0.01\n    assert abs(candidate(5) - 78.53975) < 0.01\n    assert abs(candidate(7) - 153.93804) < 0.01\n    assert abs(candidate(2) - 12.56636) < 0.01\n    assert abs(candidate(4) - 50.26544) < 0.01", "entry_point": "calculate_circle_area"}
{"task_id": "test/38", "prompt": "def count_table_occurrences(text):\n    '''Count the occurrences of the word 'table' in a given text\n    Args:\n        text (str): The input text\n    Returns:\n        int: The number of times 'table' appears in the text\n    '''\n", "canonical_solution": "    return text.lower().count('table')", "test": "def check(candidate):\n    assert candidate('The table is made of wood and has four legs.') == 1\n    assert candidate('We sat around the table and discussed our plans.') == 1\n    assert candidate('The coffee table in the living room is small but stylish.') == 1\n    assert candidate('She placed the document on the table and walked away.') == 1\n    assert candidate('The table occupies a significant amount of space in the room.') == 1", "entry_point": "count_table_occurrences"}
{"task_id": "test/39", "prompt": "def is_primary_color(color):\n    '''Check if the given color is a primary color\n    Args:\n        color (str): The color to be checked\n    Returns:\n        bool: True if the color is primary, False otherwise\n    '''\n", "canonical_solution": "    return color.lower() in ['red', 'blue', 'yellow']", "test": "def check(candidate):\n    assert candidate('red') == True\n    assert candidate('green') == False\n    assert candidate('blue') == True\n    assert candidate('yellow') == True\n    assert candidate('orange') == False", "entry_point": "is_primary_color"}
{"task_id": "test/40", "prompt": "def calculate_area_of_triangle(base, height):\n    '''Calculate the area of a triangle\n    Args:\n        base (float): The length of the base of the triangle\n        height (float): The height of the triangle\n    Returns:\n        float: The area of the triangle\n    '''\n", "canonical_solution": "    return 0.5 * base * height", "test": "def check(candidate):\n    assert abs(candidate(5, 4) - 10.0) < 0.01\n    assert abs(candidate(8, 6) - 24.0) < 0.01\n    assert abs(candidate(10, 3) - 15.0) < 0.01\n    assert abs(candidate(12, 5) - 30.0) < 0.01\n    assert abs(candidate(7, 2) - 7.0) < 0.01", "entry_point": "calculate_area_of_triangle"}
{"task_id": "test/41", "prompt": "def count_dog_occurrences(text):\n    '''Count the occurrences of the word 'dog' in a given text\n    Args:\n        text (str): The input text\n    Returns:\n        int: The number of times 'dog' appears in the text\n    '''\n", "canonical_solution": "    return text.lower().count('dog')", "test": "def check(candidate):\n    assert candidate('The lazy dog jumped over the fence.') == 1\n    assert candidate('The brown dog and the black dog were playing together.') == 2\n    assert candidate('She walked her dog in the park every morning.') == 1\n    assert candidate('The dog barked loudly when the doorbell rang.') == 1\n    assert candidate('The big dog chased the small dog around the yard.') == 2", "entry_point": "count_dog_occurrences"}
{"task_id": "test/42", "prompt": "def count_numbers_greater_than_or_equal_to_k(numbers, k):\n    '''Count the numbers greater than or equal to k in a list\n    Args:\n        numbers (list): List of numbers\n        k (float): The value to compare the numbers against\n    Returns:\n        int: The count of numbers greater than or equal to k\n    '''\n", "canonical_solution": "    return sum(1 for num in numbers if num >= k)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], 3) == 4\n    assert candidate([10, 20, 30, 40, 50], 25) == 3\n    assert candidate([5, 10, 15, 20, 25, 30, 35], 20) == 4\n    assert candidate([100, 200, 300, 400, 500], 250) == 3\n    assert candidate([7, 7, 7, 7, 7], 7) == 5", "entry_point": "count_numbers_greater_than_or_equal_to_k"}
{"task_id": "test/43", "prompt": "def calculate_average_game_score(player_scores):\n    '''Calculate the average score achieved in a game\n    Args:\n        player_scores (list): List of individual scores obtained by players\n    Returns:\n        float: Average score achieved in the game\n    '''\n", "canonical_solution": "    return sum(player_scores) / len(player_scores)", "test": "def check(candidate):\n    assert abs(candidate([10, 15, 8, 12]) - 11.25) < 0.01\n    assert abs(candidate([5, 3, 7, 9]) - 6.0) < 0.01\n    assert abs(candidate([20, 25, 18, 22]) - 21.25) < 0.01\n    assert abs(candidate([12, 17, 30, 25]) - 21.0) < 0.01\n    assert abs(candidate([8, 10, 12, 5]) - 8.75) < 0.01", "entry_point": "calculate_average_game_score"}
{"task_id": "test/44", "prompt": "def is_primary_color(color):\n    '''Check if a color is a primary color\n    Args:\n        color (str): The name of the color\n    Returns:\n        bool: True if the color is a primary color, False otherwise\n    '''\n", "canonical_solution": "    primary_colors = ['red', 'blue', 'yellow']\n    return color.lower() in primary_colors", "test": "def check(candidate):\n    assert candidate('red') == True\n    assert candidate('Blue') == True\n    assert candidate('yellow') == True\n    assert candidate('green') == False\n    assert candidate('pink') == False", "entry_point": "is_primary_color"}
{"task_id": "test/45", "prompt": "def calculate_video_duration(frame_rate, total_frames):\n    '''Calculate the duration of a video based on frame rate and total frames\n    Args:\n        frame_rate (int): The number of frames per second\n        total_frames (int): The total number of frames in the video\n    Returns:\n        float: The duration of the video in seconds\n    '''\n", "canonical_solution": "    return total_frames / frame_rate", "test": "def check(candidate):\n    assert abs(candidate(30, 900) - 30.0) < 0.01\n    assert abs(candidate(25, 625) - 25.0) < 0.01\n    assert abs(candidate(24, 1440) - 60.0) < 0.01\n    assert abs(candidate(60, 3600) - 60.0) < 0.01\n    assert abs(candidate(15, 2250) - 150.0) < 0.01", "entry_point": "calculate_video_duration"}
{"task_id": "test/46", "prompt": "def find_complementary_color(primary_color):\n    '''Find the complementary color in a color scheme\n    Args:\n        primary_color (str): The primary color in the scheme\n    Returns:\n        str: The complementary color\n    '''\n", "canonical_solution": "    color_map = {'red': 'cyan', 'blue': 'orange', 'yellow': 'purple', 'cyan': 'red', 'orange': 'blue', 'purple': 'yellow'}\n    return color_map.get(primary_color, 'Not a primary color')", "test": "def check(candidate):\n    assert candidate('red') == 'cyan'\n    assert candidate('blue') == 'orange'\n    assert candidate('yellow') == 'purple'\n    assert candidate('cyan') == 'red'\n    assert candidate('orange') == 'blue'", "entry_point": "find_complementary_color"}
{"task_id": "test/47", "prompt": "def simulate_user_logout(username):\n    '''Simulate the logout of a user\n    Args:\n        username (str): The username of the user to logout\n    Returns:\n        str: A message confirming the logout\n    '''\n", "canonical_solution": "    return f'{username} has been successfully logged out'", "test": "def check(candidate):\n    assert candidate('user1') == 'user1 has been successfully logged out'\n    assert candidate('admin') == 'admin has been successfully logged out'\n    assert candidate('customer123') == 'customer123 has been successfully logged out'\n    assert candidate('john_doe') == 'john_doe has been successfully logged out'\n    assert candidate('test_user') == 'test_user has been successfully logged out'", "entry_point": "simulate_user_logout"}
{"task_id": "test/48", "prompt": "def calculate_student_average(scores):\n    '''Calculate the average score of a student based on a list of scores\n    Args:\n        scores (list): List of scores obtained by the student\n    Returns:\n        float: The average score of the student\n    '''\n", "canonical_solution": "    return sum(scores) / len(scores)", "test": "def check(candidate):\n    assert candidate([80, 90, 95, 85, 75]) == 85.0\n    assert candidate([60, 70, 80, 90, 100]) == 80.0\n    assert candidate([85, 85, 85, 85, 85]) == 85.0\n    assert candidate([100, 90, 80, 70, 60]) == 80.0\n    assert candidate([75, 80, 70, 90, 85]) == 80.0", "entry_point": "calculate_student_average"}
{"task_id": "test/49", "prompt": "def calculate_triangle_area(base, height):\n    '''Calculate the area of a triangle\n    Args:\n        base (float): The base length of the triangle\n        height (float): The height of the triangle\n    Returns:\n        float: The area of the triangle\n    '''\n", "canonical_solution": "    return 0.5 * base * height", "test": "def check(candidate):\n    assert abs(candidate(5, 10) - 25.0) < 0.01\n    assert abs(candidate(3, 7) - 10.5) < 0.01\n    assert abs(candidate(12, 8) - 48.0) < 0.01\n    assert abs(candidate(15, 20) - 150.0) < 0.01\n    assert abs(candidate(6, 9) - 27.0) < 0.01", "entry_point": "calculate_triangle_area"}
{"task_id": "test/50", "prompt": "def check_if_numbers_are_equal(x, y):\n    '''Check if two numbers are equal\n    Args:\n        x (float): First number\n        y (float): Second number\n    Returns:\n        bool: True if the numbers are equal, False otherwise\n    '''\n", "canonical_solution": "    return x == y", "test": "def check(candidate):\n    assert candidate(5, 5) == True\n    assert candidate(10, 5) == False\n    assert candidate(15, 15) == True\n    assert candidate(20, 13) == False\n    assert candidate(25, 25) == True", "entry_point": "check_if_numbers_are_equal"}
{"task_id": "test/51", "prompt": "def calculate_display_resolution(width, height):\n    '''Calculate the display resolution based on width and height\n    Args:\n        width (int): The width of the display\n        height (int): The height of the display\n    Returns:\n        str: The display resolution as a string\n    '''\n", "canonical_solution": "    if width < 1024 or height < 768:\n        return 'Low resolution'\n    elif 1024 <= width < 1920 and 768 <= height < 1080:\n        return 'Standard HD resolution'\n    elif width >= 1920 and height >= 1080:\n        return 'Full HD or higher resolution'\n    else:\n        return 'Unknown resolution'", "test": "def check(candidate):\n    assert candidate(800, 600) == 'Low resolution'\n    assert candidate(1366, 768) == 'Standard HD resolution'\n    assert candidate(1920, 1080) == 'Full HD or higher resolution'\n    assert candidate(1280, 800) == 'Standard HD resolution'\n    assert candidate(2560, 1440) == 'Full HD or higher resolution'", "entry_point": "calculate_display_resolution"}
{"task_id": "test/52", "prompt": "def check_boolean_true(boolean_value):\n    '''Check if the boolean value is True\n    Args:\n        boolean_value (bool): A boolean value\n    Returns:\n        bool: True if the input is True, False otherwise\n    '''\n", "canonical_solution": "    return boolean_value is True", "test": "def check(candidate):\n    assert candidate(True) is True\n    assert candidate(False) is False\n    assert candidate(1 == 1) is True\n    assert candidate(10 > 15) is False\n    assert candidate(not False) is True", "entry_point": "check_boolean_true"}
{"task_id": "test/53", "prompt": "def count_defeated_enemies(enemies):\n    '''Count the number of defeated enemies in a game\n    Args:\n        enemies (list): List of enemy status, True for defeated, False for undefeated\n    Returns:\n        int: The count of defeated enemies\n    '''\n", "canonical_solution": "    return sum(1 for enemy in enemies if enemy)", "test": "def check(candidate):\n    assert candidate([True, True, False, True, False]) == 3\n    assert candidate([True, True, True, True, True]) == 5\n    assert candidate([False, False, False, False, False]) == 0\n    assert candidate([True, False, True, False, True]) == 3\n    assert candidate([True, False, False, True, True]) == 3", "entry_point": "count_defeated_enemies"}
{"task_id": "test/54", "prompt": "def count_array_elements(arr):\n    '''Count the number of elements in the array\n    Args:\n        arr (list): The input array\n    Returns:\n        int: The number of elements in the array\n    '''\n", "canonical_solution": "    return len(arr)", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == 5\n    assert candidate([10, 20, 30, 40]) == 4\n    assert candidate([100, 200, 300, 400, 500, 600]) == 6\n    assert candidate([5, 15, 25]) == 3\n    assert candidate([]) == 0", "entry_point": "count_array_elements"}
{"task_id": "test/55", "prompt": "def calculate_output_device_cost(price_per_unit, quantity):\n    '''Calculate the total cost of output devices\n    Args:\n        price_per_unit (float): The price per unit of the output device\n        quantity (int): The quantity of output devices purchased\n    Returns:\n        float: The total cost of the output devices\n    '''\n", "canonical_solution": "    return price_per_unit * quantity", "test": "def check(candidate):\n    assert abs(candidate(100, 5) - 500.0) < 0.01\n    assert abs(candidate(50, 10) - 500.0) < 0.01\n    assert abs(candidate(200, 2) - 400.0) < 0.01\n    assert abs(candidate(75, 8) - 600.0) < 0.01\n    assert abs(candidate(120, 5) - 600.0) < 0.01", "entry_point": "calculate_output_device_cost"}
{"task_id": "test/56", "prompt": "def count_and_print_words(word_list):\n    '''Count the occurrences of each word in a list and print the results\n    Args:\n        word_list (list): List of words\n    Returns:\n        dict: A dictionary with each word as key and its count as value\n    '''\n", "canonical_solution": "    word_count = {}\n    for word in word_list:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    for word, count in word_count.items():\n        print(f'{word}: {count}')\n    return word_count", "test": "def check(candidate):\n    test_words = ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple']\n    expected_result = {'apple': 3, 'banana': 2, 'cherry': 1}\n    assert candidate(test_words) == expected_result\n    test_words = ['hello', 'world', 'hello', 'apple', 'world', 'hello', 'world']\n    expected_result = {'hello': 3, 'world': 3, 'apple': 1}\n    assert candidate(test_words) == expected_result\n    test_words = ['this', 'is', 'a', 'test', 'this', 'is', 'just', 'a', 'test']\n    expected_result = {'this': 2, 'is': 2, 'a': 2, 'test': 2, 'just': 1}\n    assert candidate(test_words) == expected_result\n    test_words = ['one', 'two', 'three', 'one', 'two', 'three', 'two', 'one', 'four']\n    expected_result = {'one': 3, 'two': 3, 'three': 2, 'four': 1}\n    assert candidate(test_words) == expected_result\n    test_words = ['python', 'java', 'python', 'c++', 'java', 'javascript', 'python']\n    expected_result = {'python': 3, 'java': 2, 'c++': 1, 'javascript': 1}\n    assert candidate(test_words) == expected_result", "entry_point": "count_and_print_words"}
{"task_id": "test/57", "prompt": "def find_largest_variable(arr):\n    '''Find the largest variable in the given list\n    Args:\n        arr (list): A list of variables\n    Returns:\n        float: The largest variable in the list\n    '''\n", "canonical_solution": "    return max(arr)", "test": "def check(candidate):\n    assert candidate([1, 5, 3, 7, 4]) == 7\n    assert candidate([10, 20, 30, 40]) == 40\n    assert candidate([100, 200, 300, 400, 500, 600]) == 600\n    assert candidate([5, 15, 25, 10]) == 25\n    assert candidate([500, 1000, 2000, 1500, 2500]) == 2500", "entry_point": "find_largest_variable"}
{"task_id": "test/58", "prompt": "def calculate_average_page_load_time(total_load_time, total_pages):\n    '''Calculate the average page load time for a website\n    Args:\n        total_load_time (float): Total time taken to load all website pages in seconds\n        total_pages (int): Total number of pages on the website\n    Returns:\n        float: Average page load time in seconds\n    '''\n", "canonical_solution": "    return total_load_time / total_pages", "test": "def check(candidate):\n    assert abs(candidate(10, 5) - 2.0) < 0.01\n    assert abs(candidate(20, 10) - 2.0) < 0.01\n    assert abs(candidate(100, 50) - 2.0) < 0.01\n    assert abs(candidate(500, 250) - 2.0) < 0.01\n    assert abs(candidate(1000, 500) - 2.0) < 0.01", "entry_point": "calculate_average_page_load_time"}
{"task_id": "test/59", "prompt": "def calculate_string_length(input_string):\n    '''Calculate the length of the input string\n    Args:\n        input_string (str): The input string\n    Returns:\n        int: The length of the input string\n    '''\n", "canonical_solution": "    return len(input_string)", "test": "def check(candidate):\n    assert candidate('apple') == 5\n    assert candidate('banana') == 6\n    assert candidate('cherry') == 6\n    assert candidate('date') == 4\n    assert candidate('elderberry') == 10", "entry_point": "calculate_string_length"}
{"task_id": "test/60", "prompt": "def calculate_area_of_shape(side_length):\n    '''Calculate the area of a specific shape\n    Args:\n        side_length (float): The length of the sides of the shape\n    Returns:\n        float: The area of the shape\n    '''\n", "canonical_solution": "    return side_length ** 2", "test": "def check(candidate):\n    assert abs(candidate(4) - 16.0) < 0.01\n    assert abs(candidate(5) - 25.0) < 0.01\n    assert abs(candidate(3) - 9.0) < 0.01\n    assert abs(candidate(6) - 36.0) < 0.01\n    assert abs(candidate(7) - 49.0) < 0.01", "entry_point": "calculate_area_of_shape"}
{"task_id": "test/61", "prompt": "def detect_faulty_input_device(input_device):\n    '''Detect if the input device is faulty\n    Args:\n        input_device (str): The name of the input device\n    Returns:\n        bool: True if the input device is faulty, False otherwise\n    '''\n", "canonical_solution": "    return input_device.startswith('faulty')", "test": "def check(candidate):\n    assert candidate('keyboard') == False\n    assert candidate('mouse') == False\n    assert candidate('faulty_keyboard') == True\n    assert candidate('faulty_mouse') == True\n    assert candidate('camera') == False", "entry_point": "detect_faulty_input_device"}
{"task_id": "test/62", "prompt": "def calculate_hardware_cost(price_per_unit, quantity):\n    '''Calculate the total cost of hardware components\n    Args:\n        price_per_unit (float): The price per unit of the hardware component\n        quantity (int): The quantity of hardware components purchased\n    Returns:\n        float: The total cost of the hardware components\n    '''\n", "canonical_solution": "    return price_per_unit * quantity", "test": "def check(candidate):\n    assert abs(candidate(200, 5) - 1000.0) < 0.01\n    assert abs(candidate(150, 10) - 1500.0) < 0.01\n    assert abs(candidate(500, 2) - 1000.0) < 0.01\n    assert abs(candidate(75, 20) - 1500.0) < 0.01\n    assert abs(candidate(120, 8) - 960.0) < 0.01", "entry_point": "calculate_hardware_cost"}
{"task_id": "test/63", "prompt": "def count_animation_occurrences(text):\n    '''Count the occurrences of the word 'animation' in a given text\n    Args:\n        text (str): The input text\n    Returns:\n        int: The number of times 'animation' appears in the text\n    '''\n", "canonical_solution": "    return text.lower().count('animation')", "test": "def check(candidate):\n    assert candidate('Animation is a beautiful art form.') == 1\n    assert candidate('I watched an animation yesterday.') == 1\n    assert candidate('There were animations playing on the screen.') == 1\n    assert candidate('The animated movie was captivating.') == 0\n    assert candidate('The animations in the film were stunning.') == 1", "entry_point": "count_animation_occurrences"}
{"task_id": "test/64", "prompt": "def calculate_rectangle_area(length, width):\n    '''Calculate the area of a rectangle\n    Args:\n        length (float): The length of the rectangle\n        width (float): The width of the rectangle\n    Returns:\n        float: The area of the rectangle\n    '''\n", "canonical_solution": "    return length * width", "test": "def check(candidate):\n    assert abs(candidate(5, 4) - 20) < 0.01\n    assert abs(candidate(10, 3.5) - 35) < 0.01\n    assert abs(candidate(7.2, 9) - 64.8) < 0.01\n    assert abs(candidate(15.5, 8.5) - 131.75) < 0.01\n    assert abs(candidate(20, 20) - 400) < 0.01", "entry_point": "calculate_rectangle_area"}
